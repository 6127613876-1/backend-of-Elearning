[
    {
        "video_id": "qz0aGYrrlhU",
        "title": "HTML Tutorial for Beginners: HTML Crash Course",
        "url": "https://www.youtube.com/watch?v=qz0aGYrrlhU",
        "duration": 4174,
        "transcript": "welcome to the first part of the ultimate html and css series in this series i'm going to take you on a journey and teach you all the skills you need to build fast and beautiful websites that look great on all kinds of devices i'm assuming you know nothing about html or css i want to learn everything from scratch so in the first part of this series we're going to talk about the fundamentals of web development with html and css in the second part we'll explore the advanced concepts and in the third part we'll put everything together and build a beautiful responsive and blazingly fast website for an imaginary cloud hosting company called mashify if you want to play with this website just head over to mashify.com and see it for yourself this is what you're going to build in this series i'm ash hamadani and i've taught millions of people how to code or how to become professional software engineers through my coding school and youtube channel if you're new here be sure to subscribe as we upload new videos all the time now let's jump in and get started [Music] all right let's talk about the tools you need to take this course for the starter you need a code editor there's so many code editors out there like visual studio code or vs code sublime text adam and so on in this course i'm going to use vs code along with a few extensions for starting a web server and formatting our code you're welcome to use your favorite code editor if you know what you're doing but otherwise head over to code.visualstudio.com and download the latest version of vs code now here inside vs code we're going to install a couple of extensions so let's open the extensions panel and search for preview here's the extension we're going to install prettier code formatter with this extension we can format our code and make it pretty this is a very popular extension as you can see it's been downloaded more than 9 million times so over here you're going to have an install button just click it and you're done next we're going to install another extension called live server with this we can launch our website inside a development web server again this is a very popular extension it's been downloaded almost 8 million times now in addition to these we're going to use a browser to view and test our web pages again you can use your favorite browser but in this course i'm going to use google chrome and i encourage you to use the same browser so you can easily follow the course we're going to start our web development journey here in every section you will learn something new about web development and by the end of this course you will put all of this together to build a beautiful web page in this section we're going to talk about the fundamentals of web development you'll learn the languages and tools used in web development as well as the key concepts and vocabulary such as url http gum and so on we're also going to talk about how websites work so you will understand what exactly happens under the hood when you use your browser to visit a website you will also learn how to inspect network traffic using chrome dev tools which is a very powerful tool used by front-end developers we'll also talk about the basics of html and css and validating web pages which is something a lot of developers miss this is going to be an awesome journey so let's jump in and get started [Music] this course is your first step towards becoming a web developer so let me give you a simple roadmap to know where you are and where you should go next every website has two parts a front end and a backhand the front end is the part that you see in your browser and interact with all the visual aspects the back end is the part that powers the front end it's behind the scenes and is mainly about storing data in databases and providing it to the front end so web development jobs fall into three main categories front-end development back-end development and full-stack development which involves both front-end and back-end development front-end developers use html css and javascript to build front-ends back-end developers have different sets of tools available to them which is outside the scope of this course so let's talk about html css and javascript html is short for hypertext markup language i know it's a mouthful but basically we use html to define the building blocks of our web pages css is short for cascading stylesheet and is used for styling web pages and making them beautiful javascript is used for adding functionality to web pages let me give you an analogy think of a building a building in the real world is like a web page on the internet it has a skeleton or structure it can have pretty walls windows and tiles and it can have certain functionality for example when we press the elevator button it comes to pick us up here's a real example let's say we want to build a website like twitter for each tweet we want to have a layout like this so first we use html to define all the building blocks of this layout what are these building blocks here an image some text indicating the user's twitter handle another block of text containing the message and three icons for commenting retweeting and liking the tweet we use html to add these building blocks to our web page then we use css to give it visual effects for example with css we can make the font bold we can make our image round we can add some padding around here we can change the color of these icons and define their look when we hover over them so css is all about aesthetics or visual effects with css we can also create beautiful animations now most web pages these days are interactive they respond to our actions like clicks and scrolls this is where javascript comes in with javascript we can add functionality or behavior to our web pages for example we can like your tweet so javascript is a programming language while html and css are not meaning we cannot use them to tell computers what to do we use them to define the building blocks of our web pages and style them every webpage you have seen on our internet is built with these three languages so the better you learn and understand these languages and their features the better you will be at front-end development so your front-end development journey starts with html and css i would say if you spend three to five hours every day studying and coding you should be able to have a reasonable understanding of these two languages in about a month or a month and a half once you learn these languages then you need to learn javascript i have a separate series for learning javascript so after finishing this series you may want to enroll in that series i would say learning javascript would probably take another six weeks of your time of course you're not going to be a javascript expert in just six weeks but you will have a reasonable understanding of it and you will learn more as you work on different projects so the first three months is all about the fundamentals now building websites often include a bunch of repetitive tasks this is where front-end frameworks and libraries come in a framework or a library comes with a lot of code that we can reuse in our websites so they help us get the job done faster that's why a lot of companies these days use one of these popular frameworks like react angular or vue now technically react is not a framework it's a library but subtle distinction on site all these tools serve the same purpose they help us build applications faster now you don't need to learn all of these to get started different companies use different tools for different projects so as you move from one project to another you may want to learn about the other tools if you're starting out just focus on react because it's the most popular tool in this space once you learn react you can always learn the other tools if needed for react you would probably need one to two months again i have a comprehensive course on react more than 40 000 people have taken this course and loved it alright what's the next step version control systems we use a version control system to keep track of our project history and work collaboratively with others there are many version control systems out there like git subversion mercurial and so on but git is the most popular tool in this space and is used in more than 70 of software companies that's why you'll see it in almost every job description i would say you would probably need two weeks for learning git and again i have a comprehensive course for you so these are the essential skills that every front-end developer must have you'll see these listed on almost every job description now different jobs require other skills but these skills vary from one company to another so you can learn these additional things in the future or on the job for now just focus on these four skills or four steps remember less is more don't try to learn too many things quickly you won't learn anything you'll just waste your time alright that's your roadmap next we're going to talk about how the web works [Music] have you ever wondered how the web works in this lesson i'm going to tell you exactly what happens the moment you type the address of a website into your browser and hit enter as part of this we're going to talk about a few important concepts and terms that you need to know as a web developer so let's say we launch our browser and head over to a website like codewithmosh.com now this address that we have in the browser address bar is called a url which is short for uniform resource locator basically it's a way to locate a resource on the internet resources can be web pages also called html documents they can be images video files fonts and so on so we type the url of a website and hit enter what happens now well there are two pieces involved here the browser also called the client and the computer or computers that host our target website we refer to these as web servers or servers for short this is what we call the client server model the client requests a service the server provides the service so our browser sends a message to the server and says hey give me the home page of this website this is kind of similar to how you send your friend a text message you can think of your phone as the client sending the message and your friend's phone as the server receiving the message now back to our example this message is formatted based on a protocol called http or hypertext transfer protocol you've probably noticed it before but never know what it is in simple terms http is a language that clients and servers use to talk to each other it's not a programming language it's just a plain textual language for communicating over the internet we also have https which is http with encryption so the messages exchange between the client and the server are encrypted here is a simplified example of an http message with this message the browser tells the server what it's looking for so on the first line it says that it wants to get a page or a file called index.html using http version 1.1 index.html often represents the home page of websites on the second line we can see the host that is codewithmosh.com and on the third line we can see the language that the client can accept in this case english now don't worry about memorizing any of this all i want you to understand here is that this message is structured based on the http protocol that clients and servers understand so the server receives this message it figures out what the client is asking and then it will send a message back to the client the first message is called an http request and the second message is called an http response every data exchange using the http protocol involves two messages a request and a response now what is in the response here's a simplified example on the first line we see the version of http protocol used followed by a number which is the status code 200 means successful or okay right below that we can see the date and time of the response next we can see the type of content the server is sending back to the client in this case text html and after that we can see the html code or the html document that represents the home page of codewithmosh.com of course the actual html code is way longer now as the browser reads this html document it constructs what we call a dom or a document object model don't let this fancy name scare you this is a model that represents the object or elements in our html document what are these elements all the building blocks of our page like paragraphs of text images links and other stuff you will see this in action in the next lesson now as the browser is reading this html document that is returned from the server it discovers references to other resources in this document like images fonts and other stuff each of these resources has an address or a url so for each resource the browser sends a separate http request to the server to fetch that resource many of these http requests are set in parallel so we can see the page as quickly as possible once the browser has all the necessary resources it will render the html document rendering an html document means displaying it it's a fancy technical term we use often so in a nutshell our browser sends an http request to the server and receives an http response this http response contains an html document the browser reads that html document to construct a document object model and render the page in the next lesson i'm going to show you all of these steps in action [Music] all right let's see http requests and responses in action so open up chrome and head over to google.com now we need to access chrome dev tools this is a very powerful tool used by frontend developers so on the top we go to view developer developer tools now look at the shortcut on mac it's alt or option command and i on windows is obviously different but remember the shortcut because it's much faster to access the devtools via the keyboard so here's the dev tools the first time you see it it might appear a bit intimidating but trust me it's much easier than you think throughout the course you're going to learn more about the dev tools so here we have a few different tabs elements console sources network and so on in this demo we're going to go to the network tab so we can inspect the network traffic to and from google.com now by default devtools is docked to the bottom of the screen we can dock it to the left to the right or undock it as a separate window so over here we can dock it to the left side a lot of frontend developers like this layout so they put devtools on the left side and they have their website on the right side now in this demo i'm going to undock it as a separate window so we have more space to work with so let's undock it good now we need to refresh our website as you can see over here on match we can press command on r on windows is probably control and r alternatively we can go back to this window and press the refresh button now back to the dev tools look at all these items over here these are the http requests that are sent from our browser to google.com as you can see there are totally 45 requests and here's the amount of data transferred over the network so in this case just over 94 kilobytes now look at the first item in this list this is the first http request that chrome sent to google.com as you can see with this request the browser wanted to get a document and the status of this request is 200 which means okay over here you can see the amount of data transferred over the network for this request and the time it took to get the response now if we click on this request we can see more details about it so here on the headers tab we can see all the headers of our request and response so here are some general headers like request url request method which is get status code that is 200 we talked about it remote address this is the new make representation of google.com now down below we have response editors there are so many headers here you don't have to worry about them but as an example look at content type we talked about this in the previous lesson so the type of this response is text html below that we have the date and time of the response now if we click on the preview tab we can see a preview of the html document that is returned from the server so this is the home page of google now in this html document we have references to other resources like images fonts and so on so all these subsequent requests are sent to download those resources so right below the first request we have a request for downloading a png or an image file here's another request for getting another image we have two requests for getting two different fonts and so on now we can easily filter this list so let's click on the filter icon here by default we see all requests but we can filter by request type for example we can select doc to see requests for downloading html documents or font to see the requests that were sent to download fonts and so on next i'm going to show you how to create your first html document [Music] alright first things first here on your desktop or anywhere on your computer right click and create a new folder i'm going to call this html but we could call it anything now let's go back to vs code and open the explorer panel then we go to open folder and open the folder that we just created good now this folder is currently empty so let's add a new file here called index.html as i told you before index.html often represents the home page of websites so let's go with that now we can close the explorer panel by pressing command and b on mac or control and b on windows good now the first thing we need to do here is to tell the browser that this is an html5 document so we type a left angle bracket now look at this suggestion list the first item here is doctype or document type let's press enter or tab vs code generated this piece of code for us so with this line of code we can tell browsers that this is an html5 document this line of code here is called doctype declaration in the previous versions of html our doctype declaration was so long it was so messy but html5 solved this problem so all we have to type is doctype html and by the way html is not a case sensitive language which means it's not sensitive to uppercase and lowercase letters but conventionally speaking we type everything in lowercase except doctype this is just a convention we could type this in lowercase and that's perfectly fine so let's revert it back now right after this we need to use our html elements to define the structure of this web page the first element we're going to use is the html element so we type html and then press tab or enter once again vscode generated this piece of code for us so what we have here on the left side is called the opening tag and what we have on the right side is the closing tag so most html elements have an opening and a closing tag but there are exceptions as i'm going to show you later in this video now inside this element we're going to add additional elements now because i don't want to type everything in one line i'm going to press enter that's better now here we're going to add two elements head and body so once again we type head press tab good and then body we use the head element to give browser information about this page for example here we can use the title element to specify the title of this page that appears in the browser over here so let's type my first web page now let's save the changes by pressing command and s on mac or ctrl and s on windows good now before going any further let's right click somewhere and go to open with live server so we're going to open this page using the development server that we just installed okay all right take a look so our page is currently empty because we haven't added any elements inside this page and over here we can see the title that we just typed my first web page now look at the url or address of this page we have 127.0.0.1 this number or this ip address represents the local computer it's globally known so everybody knows 127.0.0.1 references the current computer after that we have a colon and then we have the port number on which our web server is listening so our web server is waiting for http requests on this port okay then we have a forward slash followed by the name of our file index.html now back to vs code inside the body element we're going to add elements that would appear on our page so let's say we want to display a tweet what elements do we need here an image and some text elements so we type img short for image and then press tab here's our image element now this image element is different from the other elements we have created so far can you tell the differences there are two differences here the first difference is that here we don't have a closing tag we only have an opening tag because the image element cannot have any child elements that's the reason now in the previous versions of html we used to add a forward slash here and this represents a self-closing tag but we don't have to do this in html5 so i'm going to keep the code simpler now here we have two attributes source and alt with these attributes we can supply additional information about an element so we use the source element to specify the path to our image so let's open up the explorer panel one more time by pressing command and b on mac or control and b on windows here i'm going to create a new folder called images now for this demo i'm going to use my own image which you can also download right below this video but you can use any image that you want so here's my image i'm going to drop it onto the images folder it's right here okay now let's close this window good so where is this image relative to our index.html file it's inside the images folder right so here in double quotes we type images slash mosh.jpg now vs code is suggesting this name so we can press tab to complete the code beautiful now alt is short for alternative text and we use this attribute to give the browser some text to display in case the image cannot be displayed we'll talk about this in more detail in the future so for now i'm going to delete this attribute good now after the image we're going to add a text element so we type p that is short for paragraph tab and here we can type my twitter handle so at marsh hammondi after that we're going to add another text element and here we can type the body of our tweet so i love to teach you html perfect save the changes now back in the browser our page refreshed automatically this is one of the beauties of live server so we don't have to manually refresh the page every time we make changes now look at what we have here so we have my image and right below that we have two text elements take a look unfortunately they're not very visible obviously this doesn't look like a tweet because we haven't applied css yet as i told you before we use html to define the structure or the building block of our web pages in the next lesson i'm going to show you how to apply css so our page looks kind of like a real tweet [Music] all right now let's see how we can use css to improve the look and feel of this page look at our head element currently we have a single element inside the head element that is our title element right now after the title we're going to add another element called style this is where we're going to write our css code so in between style tags we're going to write a bunch of css rules first we're going to work on this image our image is currently too big so let's make it a bit smaller back to vs code over here we're going to type img to reference our image element then we type a pair of curly braces and inside the braces we write one or more css declarations each declaration contains a property and a value so here we can set the width property to let's say 100 pixels so we type the property colon and then the value and then we terminate this line using a semicolon so we can write multiple css declarations now let's save the changes back in the browser our image looks smaller that's a lot better but look at the edges the edges are so sharp i would like to make them a bit round so they appear softer now back to our rule here we're going to set the border dash radius property to let's say 10 pixels now don't worry about memorizing any of these properties we're going to go over them several times throughout the course in this lesson i just want you to get a sense of what it's like to use css okay so save the changes now look the edges are round and look softer now let me show you a trick if we set border radius to a value that is half of the width we'll get a round image so i'm going to set this to 50 pixels and here's the result that's a lot better now our elements are stacked vertically i want the image to be pushed to the left side so let's set the float property to left this will push the image element to the left side of our text element take a look so that's a lot better but our image is so close to the text i want to add some space after the image so here we use another property called margin dash right we can set it to 10 pixels save and that's a lot better now let's make the username bold so we're going to repeat one more time this time we're going to apply a rule to our paragraph element so here we're going to set the font dash weight property to bolt take a look see what happened both our text elements are bold but what if you want to apply this style only to the username well we have to separate these two paragraph elements so i'm going to give the first paragraph element an attribute called class so class equals double quotes class is short for classification and we can use this attribute to put this element inside a different class or a different category just like the products in a supermarket in a supermarket we have products in different categories right so i'm going to put this paragraph element inside a class or inside a category called username and then i'm going to change this rule so this rule is currently applied to all paragraph elements but i want it to be applied only to paragraph elements with the username class so right after p we type dot username now we can also remove p and this rule will apply to all elements that have the username class whether there are paragraph elements or other types of elements okay now save the changes and take a look so that's a lot better this is css in action as you can see css has a different syntax or a different grammar than html throughout the rest of the course you're going to learn both these languages in detail next i'm going to show you how to format your code using prettier hey guys mosh here i just wanted to let you know that this video you've been watching is the first hour of my ultimate html and css series so after you watch this video if you want to learn more from me you can enroll in the full course which is about 13 hours long and covers everything you need to know to build professional quality websites with html and css it also includes summary notes exercises a real project a certificate of accomplish and you can add your resume and a 30-day money-back guarantee to get a refund if you are not satisfied so you have nothing to lose and a lot to learn so if you're interested i put the link in the description box [Music] one thing you need to know about browsers is that they ignore white spaces in html and css code for example i can put all these elements on a single line and everything still works let me show you so save the changes back in the browser we have the same result as before because browsers don't care how we format our code but formatting is very important when it comes to reading and maintaining code we want our code to be beautiful and perfectly formatted just like an article this is where we use the prettier plugin with prettier we can format our code in a consistent fashion this is super important when you're part of a team because different people have different ways of formatting their code but if everyone on the team uses the prettier plugin the code will be consistently formatted so let me show you how to use preview on the top we go to the view menu look at the shortcut for the command palette on mac it's shift command and p on windows it's probably shift control mp so let's bring up the command panel and here we search for format document now we press enter we get this message saying there are multiple formatters for html files select the default formatter to continue the reason we're getting this message is that vs code by default comes with a formatter for formatting html files but we have installed prettier which is a separate formatter so let's go to configure and tell vs go to use prettier to format html and css files okay now prettier formatting my code so none of those elements are on the same line this is a lot better but let me show you a trick we don't want to format our code every time we make a change so we can configure vs code to automatically format the code the moment we save the changes so on the top let's go to the code menu then preferences and settings like here search for format and save here's the setting let's enable this setting now every time we save the changes vs code automatically formats our code using prettier [Music] we talked about the dom or document object model i told you that when the browser reads the html document that is returned from the server it constructs a document object model now let me show you this document object model in action so once again we're going to use chrome dev tools the shortcut on mac is shift command and i on windows is probably shift control and i i'm not really sure so let's open up dev tools now in this lesson we're going to look at the elements tab now what we have here on the left side is our document object model so we see the same elements that we created earlier in the course we have the html element head body and so on but we have some additional elements that are injected by live server for example we have the script element and two divs don't worry about these these are purely used by live server so it automatically reloads our page now we can hover over any of these elements and you can see that element highlighted on the screen now we can click an element and on the right side we can see the styles applied to this element so look at the styles we defined for the image element with border radius and so on we can enable or disable these styles so we can disable the width property and now our image is big we can bring it back we can also change its value so we can set it to let's say 50 pixels now our image is smaller we can use the up and down arrows to change this value this is pretty handy so a lot of front-end developers use devtools to play with these styles and get the look they want once they figure out the exact styles and their values then they apply them in the code now one more thing over here we can see where these styles have been applied so in index.html on line six we can click on this link and this takes us to the exact line of code where we wrote that style now we are currently on the sources tab so we can go back to elements and inspect other elements so this is the basics of inspecting elements using devtools we're going to talk about this in more detail in the future [Music] the last thing we're going to cover in this section is validation so as we write code we may run into problems if you have a typo in our code or don't use the right syntax or grammar our web pages may not look as expected in these situations we can use a validator to identify the potential errors in our code now currently we don't have any problems on this web page it looks perfectly fine to me but let's run it by the standard html validator so we go to validator.w3.org this is a standard markup validation service we have three methods for validating our html markup we can validate by an address if our website is live on our internet but this doesn't work for us because our website is currently hosted locally in our development server so this ip address that we have over here 127.0.0.1 this is a local ip address so no one else can access our website so here we have two other methods we can validate by file upload or by direct input in this case i'm going to go with file upload so let's upload our index.html file and check so look we have one warning and two errors the warning is saying that we haven't added the lang or language attribute to the html start tag this is a common best practice because with this we can tell search engines what is the language of this webpage so they can do a better job at displaying the results this is very easy to fix so here's our html tag we're going to add the lang attribute and set it to en which is short for english now what is next we have an error saying the character encoding was not declared don't worry about this we'll talk about this in the next section so let's look at the second error it's saying that an image element must have an alt attribute so earlier we had this auth attribute i told you that we use the alt attribute to provide a description for our image so if the image cannot be displayed the alternative text will be displayed again we're going to talk about the alt attribute in more detail in the future so back to our code let's fix this error real quick here's our image tag let's add the auto attribute and for the description i'm going to say an image of mosh hammer daddy now save the changes let's re-upload the file and validate it one more time okay this time we have only a single error and that has to do with character encoding which we're going to talk about in the next section so this is all about html validation now for css we have a different validator so we go to jigsaw.w3.org css validator now you don't have to memorize this address simply go to google and search for css validator here's the first link so we have the same interface we can validate our css code using an address or by file upload or direct input now in this case we have embedded all of our css code inside our html markup but as our web pages get more complex we want to separate our css code into separate files so our code is better organized we'll talk about this in more detail in the future so for now i'm going to copy all of our css code and then go to the third tab paste it over here and validate it so we don't have any errors everything is perfect so this is all about validation validation is very important if your web pages aren't displayed as expected always start with a quick validation because this can often point you in the right direction right that brings us to the end of this section in the next section we're going to explore html in more detail [Music] we're going to continue our web development journey and explore html in more detail so in this section we're going to cover the essential html elements you need to know to build web pages you will learn all the elements used for displaying text links images lists tables as well as container and structural or semantic elements even if you know the basics of html i would still encourage you to watch this section thoroughly because a lot of people don't use these elements the right way so let's jump in and get started [Music] earlier in the course i told you that we use the head section to give browsers and search engines information about the web page so let's explore it in a bit more detail i'm going to start with a blank document now let me show you a cool trick if we type an exclamation mark and then press tab we get a basic html boilerplate which means a basic html template so on the top we have our doctype declaration below that we have our html element with the lang attribute which is a common best practice next we have our head section with a bunch of elements we're going to talk about in a second followed by the body section so this is a very basic html boiler plate now what do we have in the head section well we have a couple of metal elements for giving information about this web page the first meta element is for defining the character set what is a character set well computers don't understand characters like abc and so on they only understand numbers which are represented in the binary format zeros and ones so using a character set we can map a character to a numeric value the first character set that was designed was the ascii character set which is short for american standard code for information interchange ascii can only represent the characters in the english language so it's very limited so over here different character sets have been created to represent more characters in international languages the character said that we use most of the time these days is utf-8 which can represent almost all characters in the world so back to our code with this meta element we're defining the character set used in this html document okay now below that we have a meta element for configuring the viewport the viewport is the visible area of a web page so it is this area over here obviously on a mobile device or on a tablet our viewport is smaller but here on desktop we can change the size of the viewport by resizing the browser so now our viewport is smaller okay now back to our code with this element we're defining the initial width and zoom factor for the viewport we'll talk about this in more detail in the future for now all i want you to know is that we need this element so our web pages look good on all devices mobiles tablets and desktop computers so as a best practice every web page should have at least these two meta elements but we have additional meta elements let me show you so if you type meta in this list you can see all possible meta elements for example we have this element for defining keywords on a web page so let's select this here we can type multiple keywords like html comma css and so on in the past these keywords were heavily used for search engine optimization but these days most search engines don't put too much weight on these keywords but we can still use them to define the keywords that represent this page we have another meta element for defining a description for this page so if you type meta colon desk and then press tab or enter here we can type a description for this page what we type here will appear on google or other search engines when someone searches for a website for example if we search for apple here's what we get now look at this text what you see here comes from this element over here so this is the purpose of metal elements with this metal element we can give information about the web page alright next we're going to talk about the elements you need to know for working with text [Music] all right now let's talk about the most common elements for working with text so you learn about the p or paragraph element which we use for displaying some text so here i'm going to say i love to teach you html now sometimes we want to emphasize a part of our text let's say the html word here to do that we can wrap it inside an m or emphasis element so here i type m press tab here's the emphasis element let's hover over it and see what the tooltip says it says the m element represents stress emphasis of its content so whenever we want to emphasize some content we can wrap it inside the m element so in this case i'm going to move html inside these tags now let's save the changes here's what we get so by default browsers display emphasized content in italic but don't assume that whenever you want to display italic content you should use the m element because the purpose of the m element is to emphasize content in our html document and this helps search engines extract important content in our documents anything to do with styling should be done in css for example here we can change the default style of emphasize element and remove the italic let me show you so in the head section we add the style element and here we define a rule for emphasized content we can set the color to red and font style to normal now don't worry about memorizing any of these css properties we're going to go over them multiple times throughout the course but let's see what happens now that we apply these styles so our emphasized content is displayed in red and is no longer italic now in the past we had an element called i which was short for italic if we use this element we get the same result as before our content is displayed in italic but this element is considered deprecated because html is not meant for styling it should only be used for structuring content so don't use the i element to display content as italic okay now we have a similar element in html called strong let's hover over it and see what the tooltip says the strong element represents strong importance seriousness or urgency of its contents conceptually it's kind of similar to the emphasis element so where you should use it really depends on your context on your content now let's save the changes and see what we get so by default strong elements are displayed as bold but once again we can always change the styling now in the past we had another element called b which is short for bold so whenever we wanted to make something bold we use this element but once again this element is considered deprecated because styling should be done in css and not in html okay so don't use b or i elements now i'm going to remove this element and just add html let me show you a cool trick let's say we want to wrap this word with the m element there is a shortcut for it so on the top we go to the view menu look at the shortcut for the command palette on mac is shift command on p and on windows is probably shift ctrl np so let's select html and then bring up the command palette with this command palette we can execute commands in vs code so here i'm going to search for a command called wrap with abbreviation that is the first command in the list now we press enter and here we type the element that we want to use to wrap our selected content in this case m press enter done so i didn't have to manually create an m element and then move html inside it it's very handy so this is all about text now let's talk about headings so in html we have six heading elements h1 we have h2 h3 h4 h5 and h6 so let's see what we get so heading 1 represents the most important heading and heading 6 represents the least important heading now one common mistake that i see amongst a lot of people is that they choose these headings based on their size so if they want to have a heading with this size they would just use heading 4. that is not how you're supposed to use headings because the size can always be changed with css it's a matter of styling we should use these headings to create a hierarchy so every web page should have one and only one h1 element this heading represents what this page is all about now nothing happens if you have multiple h1 elements for example i can duplicate this line and say heading 1 plus now look we have two h1 elements but this is going to confuse search engines they're not going to figure out what this page is really all about so every page should have a single h1 element so i'm going to remove this line now after we use h1 then we should use h2 we should not jump to h4 so let's say on this page we're going to have two sections one for html the other for css so my next heading should be h2 and here we can type html obviously below this heading we can have some text so i'm going to say html tutorial our next heading should be h2 so this is the css section and in this section we can have some additional text let's say css tutorial now i'm going to delete these four headings so let's take a look so we have a hierarchy on the top we have an h1 element below that we have two h2 elements now let's say in this section we're going to have two subsections there we should use h3 elements so here's our html section in this section we're going to have two h3 elements let's say code and exercise now take a look so we have a hierarchy this is how we should use these heading elements the better we can represent the structure of our document using html the better search engines can read and understand our content so that's all about text next we're going to talk about displaying special characters in html [Music] some characters are reserved in html and to display them we have to use a special notation for example let's say we want to wrap the word html with angle brackets see what's going to happen so i type a left angle bracket and a right angle bracket see what happened vs code thought we're adding an html element so it automatically generated the closing tag we don't want this so let's delete it now back in the browser look where is our html word it's not here because the browser interpreted this as an html tag this is not what we want we want to display this exactly as this so to solve this problem we're going to use html entities all these entities start with an ampersand and end with a semicolon in between these two characters we type a few characters that determine the type of the html entity so we have an entity for displaying the less than sign that is l t short for less than now let's remove this similarly we have another html entity for displaying the greater than sign so we type an ampersand gt which is short for greater than followed by a semicolon now back to the browser that's exactly what we wanted perfect another common html entity is the copyright symbol so at the end i'm going to type an ampersand copy and a semicolon now take a look here's our copyright symbol beautiful now we have so many editors in html and quite frankly you don't need to memorize any of them in fact you're not going to use 99 of them but in case you're curious let me show you the complete list so on google search for html entities and on this second link dev.w3.org you can see the complete list of news entities so as you can see there are so many entities and honestly i have never used any of them the only ones i have used are these three plus non-breaking space let me show you what that is about so i'm going to do this line and generate some dummy text so we add a paragraph element now to generate some dummy text we type lorem followed by the number of words we want to generate let's say 50. tab look this is some dummy text in latin now let's preview it in the browser so here's what we get let's imagine that the last part on the first line and the first word on the second line should be stick together here we have a line break in between these two words you want to prevent that so i'm going to copy this word now here in vs code let's bring up the search panel by pressing command and f on mac or ctrl and f on windows now we paste this word okay here it is we want to make sure that these two words are always together there is no line breaking between them so i'm going to replace this regular space with a non-breaking space which is an html entity so we type an ampersand nbsp which is short for non-breaking space followed by a semicolon now take a look so both these words are on the second line so this is all about html entities next we're going to talk about links [Music] almost every webpage on the internet has links to other pages or websites to create these links we use the anchor element so we type a that is short for anchor and then press tab now every anchor element should have an href attribute href is short for hypertext reference i know it's a mouthful it basically means a url or a link so for this demo i'm going to create a second page called about.html and then link to it over here so in the explorer panel let's add a new page called about.html now here we're going to create a basic html boilerplate remember how to do that we type an exclamation mark and then press tab that's it beautiful now back to index.html here we can use a relative or an absolute url what do you mean by that well a relative url starts from the current page so currently we are on index.html and we want to go to about.html now currently both these pages are in the same folder so we can type a relative url to about.html like this about html that's a relative url now what if about.html was in a different folder so let's add a new folder to our project called company and then move about to this folder now where is about.html relative to the current page it's inside the company folder right so here we type company slash about.html this is a relative url now let's give this link a text i'm going to say about me so we type our text inside the anchor element okay save the changes back to the browser here's our link click and we're currently on the about page which is empty beautiful now back to our homepage instead of a text we can also use an image so i'm going to delete about me and add an image element so img tab once again here we can type a relative url to our target image so i'm going to go with images mosh.jpg now save take a look obviously this image is way too big we can always use css to resize it but that aside look at the mouse icon when we hover over this image it changed to a hand to indicate that this image is clickable okay now back to our code to keep things simple i'm going to get rid of this image and get back to our text about me now let's go to the about page and add a link back to the home page so over here we're going to add an anchor element what should we type for the href attribute well currently we are inside the company folder we have to go one level up so we can access index.html right to do that we type double periods and a forward slash with this we can go one level up now at this level which is the root of our website we have the company folder the images folder and index.html so we can reference index.html and for the text we're going to say home page again this is another example of a relative url because it starts from the current page and goes somewhere else now if you're inside a deeply nested folder structure we might have to go multiple levels up so double period and a forward slash then we repeat and repeat with this we can go three levels up now as you can see urls like this kind of look messy they look hard to read in those cases we can use an absolute url so we start with a forward slash and this represents the root of our website at this level we have access to index.html so this is an absolute url okay now back to index.html here we are linking to an html document but we can also link to non-html documents like images pdfs powerpoints and so on so let's add a link to my image so for the href i'm going to say images slash mosh.jpg and for the text i'm going to say my photo save take a look so here's our second link click my image is displayed in the browser but what if i want to prompt the user to download it that's very easy we're going to add the download attribute to our anchor element so we type download press enter now this attribute doesn't have a value so we can remove the double quotes and the equal sign so we just add the attribute name now save back to the browser we go back here we have to manually refresh the page because the live server only refreshes the current page now previously we were on my image so that was the url that live server refreshed so here we refresh to get the latest changes now when i click on this link instead of seeing my image we're going to see my image getting downloaded take a look click and here's my image beautiful now we can also link to other parts of this page so let's create two sections with a lot of text so i'm going to add an h2 element and of course i missed the h1 but let's not worry about it for this h2 we're going to say html and below that we're going to add some dummy text with 200 words so paragraph lorem 200 good now right after that we're going to add another h2 for the css section with some more text okay let's save the changes take a look as you can see the css section is below default so we have to scroll down to see what we can do here is on the top we can add a link to the css section so when the user clicks on that they will immediately jump to the css section that is very easy so here's the css section first we have to give this element a unique identifier just like everyone in the real world can have a unique identifier like a driver's license or a password every element on a page can also have a unique identifier so here i'm going to set the id attribute to css or we can use a more descriptive name like section dash css the name doesn't really matter here what matters is that we're defining what is called a fragment or a place on this page now we're going to add a link to this fragment so on the top let's add another anchor element now for the href we're going to type the pound sign followed by the name of our fragment which is section css and for the text we're going to say css now back to the browser take a look i'm going to click on this we immediately jump to the css section beautiful now a lot of websites like this also have a link that helps you jump to the top of the page let's see how we can create that so after the css section i'm going to add another anchor element now for the href i'm going to use an empty fragment so we just type a pound sign without an identifier and then we say jump to top take a look so here's our link click and now we're on top of the page now let's see how we can link to external websites so let's add another anchor element to link to google now what should we type here well google.com is a different website so here we cannot use a relative url we have to use an absolute url but if you start with a forward slash we're referencing the root of our website but in this case we want to go to a different website how can we do that well we have to start with the protocol so https colon to forward slashes google.com now let's type google and test our page click we're on google beautiful now sometimes when linking to external website we want that link to open in a new browser window or a new tab let me show you how to do that so here's our anchor we set the target attribute to underline blank save now back to the homepage once again we have to manually refresh to get the latest changes okay now when i click on google you see a new tab beautiful and one last thing we can also link to emails so i'm going to add an anchor and for href i'm going to say mailto colon programming with mosh gmail.com email me save the changes now back to our page when i click on this link my mail client will open and my email address will be pre-populated take a look so click and here's my mail client so this is all about links now one last thing before we finish this lesson what is the difference between a link and a hyperlink well a link is just an address a url the location of the target page a hyperlink is the element that the user can click on to navigate to that target page that is the difference between a link and a hyperlink but quite often these terms are used interchangeably alright we're done with this lesson next we're going to talk about images [Music] all right now let's talk about embedding images in a bit more detail for this lesson i'm going to grab an image from unsplash.com which is where we can find a lot of beautiful and freely usable images so let's search for coffee there are tons of coffee pictures here i'm going to grab this picture we can download it for free now look this image comes in different sizes small medium and large for now we're going to grab this image in a small size but in the future we're going to talk about embedding images at different sizes depending on the device so on mobile devices we want to serve a smaller image and on desktop computers we want to serve a larger image for now let's not worry about these complexities we'll have a conflict section on this topic later on so let's download the small image now it says say thank you to nathan thanks nathan this is a beautiful picture you have done a great job now i'm going to drag and drop this image onto the images folder and then rename it to coffee we want to give it a descriptive name this is a small search engine optimization tip when we provide descriptive names for our images search engines can better understand and index our pages okay so here's our image now let's add an image element we set the source to images coffee.jpg now what about the alt attribute well i briefly mentioned that we use this attribute to provide textual description of the image it's not compulsory but is highly recommended for a number of reasons the first reason is to make our page accessible to visually impaired people these people use a screen reader to read the web out to them so with this alternative text we can tell them what we are showing on the page and that means we should write a good meaningful description here like a coffee mug on a table don't write something like image or image one that is pointless now the second benefit of providing an alternative text is that we help search engines read this text and understand what we're providing here and there's one more benefit if this image cannot be loaded for some reason the alternative text is shown let me show you what i mean so i'm going to add a typo here now back to the browser look the image is not loaded but we see the alternative text this can also happen if there is a network connectivity issue if the user gets disconnected they can still see the alternative text so let's remove the typo now let's talk about sizing images as i told you before we can use css to resize our images so here in the head section let's add a style element and apply a rule to our image now this rule is applied to all images on the page this is probably not something we want to do in the real world scenario in a real-world scenario we want to apply a class to this element and then define rules for that class we'll talk about this in more detail in the future so for now let's give this image a width of 200 pixels and a height of 200 pixels now there's a tiny problem in our image can you tell our image is kind of squashed here's the reason we're dealing with a rectangular image look this is a rectangular image but we're converting it to a square image now look at the shape of this coffee mug it's kind of round right like compared with what we have over here our image is vertically squashed let me show you another way to verify this we can right click on the image and then go to inspect this opens chrome devtools and selects our image in the dom now on the right side we can see the styles that we applied to this element now i'm going to disable the height property and i want you to pay close attention to the image and see how the shape changes so look now the coffee mug is more round but if i applied the height property it becomes squashed so how can we solve this problem well we have a new property in css called object fit so here we can set object fit to one of these values most of the time we use cover so the image covers its containing box what is this containing box well first let me set this to cover here we have this image element right conceptually there is a box around every element in an html document we don't see this box but the browser uses that box to figure out how the page should be displayed so here we have a box with this dimension 200x200 and in this box we're trying to insert this image right now when we set object fit to cover our image will get resized and potentially cropped so it covers the entire containing box let's verify this so save the changes and back in the browser look our coffee mug is round but if i disable the object fit property it gets squashed again so object fit is a very useful property now we can always play with all possible values over here so i'm going to select this deleted now using the up and down arrows we can go through this list and see the impact of every value now i'm not going to go over all these values and explain what they mean this is pointless you can always figure them out on your own just remember that most of the time we use cover so the image covers the entire containing box alright this is all about the images for now next we're going to talk about video and audio hey guys mosh here i just wanted to let you know that this video you've been watching is the first hour of my ultimate html and css series so after you watch this video if you want to learn more from me you can enroll in the full course which is about 13 hours long and covers everything you need to know to build professional quality websites with html and css it also includes summary notes exercises a real project a certificate of accomplish and you can add your resume and a 30 day money back guarantee to get a refund if you're not satisfied so you have nothing to lose and a lot to learn so if you're interested i put the link in the description box"
    },
    {
        "video_id": "ok-plXXHlWw",
        "title": "HTML in 100 Seconds",
        "url": "https://www.youtube.com/watch?v=ok-plXXHlWw",
        "duration": 154,
        "transcript": "hypertext markup language or HTML is a language that defines the structure of content on a web page development started in 1989 at CERN by Tim burner Lee who had just invented the world's first web browser worldwide web the origin of www but he needed a publishing language to display content within it so he chose a syntax based on the standard generalized markup language which uses opening and closing tags to provide meaning to otherwise unorganized text like H for heading p for paragraph and most importantly a for anchor to link to a different web page the language underwent many changes during the initial rise of the internet and was standardized as HTML 5 in 2008 the version we know and love today modern HTML contains tags to handle a variety of different media types like video audio and canvas to draw custom graphics on the Fly the typical HTML element starts with an opening and closing tag in the middle we have content which might be text or additional HTML elements called children the opening tag may also have one or more attributes which are key value pairs that can customize the appearance or behavior of the element to build your first web page create a file named index.html this file contains a hierarchy of nodes based on the document object model or Dom a web page starts with an HTML tag and has exactly two children a head and a body the head contains things that aren't directly shown in the web page like a title or a meta tag to give the page a description but notice how The Meta element has no closing tag closing tags are generally optional when an element is fully self-contained the body contains the actual UI for the end user we might start with an H1 heading followed by a paragraph of content to add an image we use an image tag which you'll notice is self closing then Define The Source attribute as the file path to the image and you'll want to give it an ALT description to make it accessible to robots and Screen readers what makes web pages revolutionary though is their ability to link to other web pages on the information Super Highway use an anchor tag to create a link then Define the hre attribute as the web page that you want to navigate to when clicked HTML also provides structural tags like division or div which are often used to group elements together where they can be styled to represent complex UI elements like navb bars when you're happy with your code grab the full file path to the HTML file and paste it into any web browser congratulations you just built your first website this has been hypertext markup language in 100 seconds hit the Subscribe button so you don't miss the upcoming sequence thanks for watching and I will see you in the next one"
    },
    {
        "video_id": "MDLn5-zSQQI",
        "title": "HTML Tutorial For Beginners |HTML In 10 Minutes | HTML Basics For Beginners | Simplilearn",
        "url": "https://www.youtube.com/watch?v=MDLn5-zSQQI",
        "duration": 554,
        "transcript": "hey everyone today's topic is learn HTML in 10 minutes but before we begin if you haven't subscribed to our Channel already make sure to subscribe to our Channel and hit the Bell icon to never miss an update let's begin first we'll go through a quick introduction to basic web architecture to understand how the internet works then we'll understand what exactly HTML is after that we'll have a look at what CSS is then we'll go through JavaScript and in the end we'll create a simple web page using HTML and CSS to gain a better understanding of the HTML tags so without further Ado let's begin now what exactly is the basic web architecture now web architecture is made up of three essential elements ments that's the website that is the front end of a web application that is visible to the user then there is the server which constitutes the back end of a web application and holds and manages all the data and finally there's the IP address that is the address assigned to a website in order to be accessible on the internet first up let's have a look at what website is so your browser starts by loading the main HTML file and then the CSS and JavaScript the user interacts with the website and is not concerned with the back end of an application now secondly we have the server once you've developed your website you'll have to host it on your server to make it accessible on the internet server along with the database contains all the data of a website and facilitates user interaction lastly there's IP address which is the third element of the web architecture now website is hosted on an IP address we put a domain name over that IP address the same way we put names over people's phone numbers when you type a domain name in the browser it will give you the server call the server will then send over the website to you next what is HTML HTML is the most widely used markup language for developing and structuring web pages on the internet it defines the structure of websites and formats these web pages es so what exactly is CSS then now CSS is a simple design language used for making web pages look more beautiful and presentable it can be attached to any HTML element to style it or even position it according to the developer's Choice then you must be wondering what exactly is Javascript now JavaScript is a powerful interpreted language targeted for web development it is used for making web pages interactive and bringing the web pages to life so now let's create your first website now HTML short for hypertext markup language is the coding standard for documents designed for web browsers consisting of a series of elements or tags and which can be used to structure a web page right so these elements can include headings paragraphs uh div containers tables and more HTML tag are nested meaning there are opening and closing tags with the content in between those tags so now let's write a simple HTML code that will help you understand the basics of the language so for this I'm using the text editor that is Visual Studio code you can go ahead and download this text editor from their official website so here I've created a simple HTML file in my vs code and I've added the initial HTML files now let me explain to you uh one by one now Doc type is not so much of a tag but it is more of an instruction now this indicates the browser that the document type to be served to the user is in fact an HTML document now this dock type instruction should always be included at the very top of your HTML page next up you have the HTML tag that is used to contain all the web pages HTML code right so it contains an opening and closing tag with contents in between them the HTML tag can also have attributes now for example there's the Lang attribute allowing you to specify the spoken language of the content of the page followed by the HTML tag there's the head tag now this is the first section of the code that contains all of the information about the web pages properties links and more it could have Pages title description additional meta tags and CSS code so here I've used the title tag and let's give a title say HTML in 10 minutes all right you can also add CSS to the Head tag by using the style tag and change the display styles of HTML elements that are being used the next section is the body tag now the body tag contains all the displayable contents of your web page including headings paragraphs div containers tables and more now the HTML header tags are used to add headings to a web page there are several types of headings available for developers to add to a web page right so first up let's have a look at them I'm going to create a simple H1 heading tag and the message I'm displaying is this is the first heading all right after this I'm going to add a paragraph tag which creates padding in the top and bottom of the element to help separate the text between each paragraph right so I'm going to add a P tag and say this is the paragraph [Music] tag after this let me add a simple h2 tag which is another heading tag and say this is the second heading now you can also add line braks which are helpful from time to time if you want to provide a single line break in your content you can do so by adding the BR tag so here let me just add one for better understanding now the HTML div tag defines a division or a section in an HTML document that is used as a container for other HTML elements now these elements can include content areas sidebars page bars page headers Footers Etc this tag is used to apply styles to HTML elements that cannot be added otherwise we can also make use of the HTML image tag to add images to a web page now these images in a web page are a very common site and they can make the website look more attractive so for that we can use the image tag so let's say IMG within which I mention the source I'm adding the HTML logo so let me just mention that here and then I'm going to provide width for it and then a specific height all right so when you save the file and when you look at the browser you can see that uh the first heading is displayed then your paragraph tag is displayed followed by the second heading and then the image now uh let me show you how you can add styles for some of these uh headings and paragraph tags so here in back my first heading tag let me just say Styles and let me change the font of the content that is being displayed and I'm going to change it to Career new and for my paragraph tag let me display the content in italics so I'll say font style and make it italics so let me save this and when I look at the browser you can see that the font has changed and so has the font style here so now we've covered a few important HTML tags used to develop a web page now there are many other tags available for almost everything you'd want to add to a web page now all of these are available on the internet for you and you can use them in your website so with that we've reached the end of this video I hope you liked it do you think we missed out on anything important let us know in the comment sections below until then keep learning and stay tuned to Simply learn hi there if you like this video subscribe to the simply learn YouTube channel and click here to watch similar videos to ner up and get certified click here"
    },
    {
        "video_id": "IJWcX2EDAKg",
        "title": "HTML Tutorial for Beginners 03 - HTML Syntax &amp; Structure",
        "url": "https://www.youtube.com/watch?v=IJWcX2EDAKg",
        "duration": 790,
        "transcript": "yo people I'm Shawn from the net ninja and this is HTML Basics lesson three HTML syntax and structure all right now in the last lesson I uh briefly mentioned that everything in HTML is pretty much controlled by a tag so let's just have a quick recap on that so we've got HTML and it's a markup language and all that's meaning is that we're marking up content uh for displaying a browser and we do this via tags all right and there's loads of different type of tags we've got P tags for paragraphs H tags for uh for headings which this example follows this is a H1 tag um so that's going to display as a header or heading rather to a user in a browser all right so let's look at a a few specific examples of tags and I'm going to jump over to notepad to do that all right so here we go I'm in notepad right now and uh I've got a simple tag here and by the way when you're uh when you're creating HTML files what you want is a text editor that's not going to format text for you and by that I mean in the text editor you can't make a font bold or change its font family or do anything like that a good example of a text editor where you can format is Microsoft Word what you want to use is something like notepad without any of those options uh there's loads of free text editors that have more advanced tools on the internet one that I like is called um brackets and that's free however for the purpose of this tutorial we're just going to use notepad because we're going to do just a few simple tags so okay what we got here we've got a P tag which is a paragraph tag so we've got the open angle bracket the P close angle bracket we've got our text in between and then we've closed our tag off with the open angle bracket the forward slash the p and a closed angle bracket so what we'd say is that this text here is wrapped within this P tag that's how we'd say um so if someone said to you hey can you wrap this sentence in a h tag you know what to do you put the H opening tag put the sentence and then you put the H closing tag so if we were to save this which I already have done and then display in a browser what we're going to see is this and you might be like well that's just text well yeah I mean that's what a paragraph text uh a paragraph tag does it displays text to the user I mean that's what a paragraph is right however if we were to change this to a H1 and we'll do that right now and save it I'm just pressing contrl s by the way uh then we'll refresh this browser and lo behold we've got a heading and that's because the browser is saying well look you've written H1 so I know this is a heading so I'm going to make this big and I'm going to make this bold so that people viewing this website they know it's a heading to and that's what browsers do they come with these default rules and styles so depending on what tag you use it displays it in a different way so we've got these tags there's more to it however now then tags can contain what's called attributes and attributes just think of them as a way of telling tags uh more information about that tag all right and there are thing that you're just going to have to learn I mean it would take me forever to go through every attribute that a tag could have and not every tag can have every attribute different tags have different attributes but there are a few Global ones that every tag can have so I give a few examples and an attribute works like this um you do your tag name then a space and then your attribute name um in this case we'll do class that's a global attribute that can be applied to any tag whatsoever in HTML then you do an equal sign and you do some quotes and then you put the value of your attribute in the quotes and right now you don't need to worry about what this attribute means because I'm going to go over some specific attributes the class included in later tutorials all right just know for now that an attribute is just the attribute name then an equal sign the quotes and then you put the value of your attribute in the quotes all right uh another example and by the way you can give multiple attributes to um an element or a tag so another example would be Style and we're wavering into the Realms of CSS here and by the way this is quite bad practice you wouldn't normally put a style attribute in uh a tag itself that's called inline styling and it's frowned upon these days um because you want to keep all of your Styles in your cascading style sheet but for the pur purpose of this example we we'll go ahead and use it if I was to put style color colon red um and Save this let's take a look at this it's turned red and I've just us uh done that via VIA uh a style attribute in the H1 tag so just remember for now that attributes can be used within tags to give it more information and we'll go through some specific examples later all right so we've got attributes we've got and I'm just going to delete these attributes for now in fact so we've got tags we've got attributes uh in the tags and we've got the different styles in the browser depending on the tag we use now then if you wanted to you know make for example a bit of this text you want to emphasize it in some way or other okay so say we want to emphasize uh this portion of the text right here okay we can Nest another tag within the H1 tag and we do do that by just opening our tag um using the tag name and then closing the tag at the end of the text and notice we've opened within the H1 so we close within the H1 as well all right so this em tag what does that mean well it means we're just emphasizing the text that's contained within the am tag all right so let's save this and see what it does so you can see we've still got this H1 and then right about here it goes into italic form and that's the browser saying okay well it wants to emphasize this particular part of the text to the user so we'll do it for him and you can control the way this is emphasized vcss but that's a totally different course so we can Nest tags within other tags and we can do it even deeper if we wanted to say we wanted to make this particular word bold we canest another tag within the tag um we're going to use use one called strong this time we'll close that off and neaten this up a little bit so notice again we've opened the strong tag within the EM tag so we close it within the EM tag as well let's save this out and refresh and have I done something wrong uh it's all going to be bold because it's a H1 but if we take uh change this to a p the paragraph and save that again you can see now we've got the paragraph text this is still all italics because it's still being emphasized by the browser and then we've got this one word paragraph in the strong tag here which is bold all right so what else uh we'll do one more thing and that is indentation so say for example we've got loads of different tags okay and they're all nested within each other now you can imagine that pretty soon it's going to get illegible it's going to be hard to read for you when you go back to your web page and for other coders who are making edits to your web page so say we've got this for example and you might not know these tags yet I'm just doing this for the purpose of this um demonstration I'm just going to use a series of give tags then we use a P tag maybe in fact no we won't we're use an a tag change it up a little bit and this hre by the way you've guessed it is an attribute um we'll just leave that blank for now and we're going to cover H references later and Link tags so we'll put a link in there and then I've even lost count of how many I've used four so we'll close four div tags because they're all nested within each [Music] other and yep I've made a mistake there we go so right I'm looking at that and this is what four levels deep and in typical websites things go maybe 10 15 20 layers deep all right so you can imagine how difficult it gets to look at this and think okay well where is the end tag for this if it's you know way over here somewhere um or where is the start tag for this you know how do I where do I Nest this next element it's going to get really difficult so what we do we do this thing called in dentation and as's a general rule of thumb if you're nesting tags within other tags what we tend to do is indent them so we present this like this let me just give a line break after every tag first of all nearly there we go okay so we put them on different lines first of all and that's still a little bit illegible you still have to kind of work it out where this div tag ends and you have to count down three and it ends on on this row here so what we tend to do is indent every layer we go in so we'll do that too and we'll do this three and we'll do this four and then we do the same for the closing brackets the closing Tags by the way sorry um and one more and so now we can see that okay well this div opens here and it ends there this div opens here ends there opens here ends there and so forth so it's a lot easier to read this and I will be honest notepad goes a bit crazy when it indents I mean it doesn't need to be indented this much um if you get um a html text editor from the web they would normally maybe indent it by something that seems like this much each level something like that okay but um you get the idea we just indent them so so then we can easily see where the TX start and where the end so let's just have a quick summary right then so we've already said that HTML uses tags to present content and tags start with an open angle bracket you have the tag name then the uh the close with a closed angle bracket you put your content and then you close the tag off always at the end with an open angle bracket forward slash the tag name and a Clos angle bracket and pretty much anything that you're going to use in HTML is controlled this way with tags all right so there's also many different kinds of tags you've already seen I've used A P tag to display normal text we've got a H1 tag uh tag to display headings we've got a uh an em tag that we've used to kind of emphasize things we've got the strong tag to make something bold etc etc there's loads of tags depending on what content you want to display to the user next thing tags can contain attributes and there's many different attributes that's one of those things you're just going to have to learn and we're going to cover some on the way through this course but there are literally tons of attributes and you're going to have to go out there and maybe look at different ones um whatever the attribute is however we always display it this way we open the angle bracket put the element name or the tag name a space then we put the attribute name in this case I've put class the equal sign then the quotations then you put your value of the attribute within the quotation all right so tags can be tags can also be nested within other tags and we saw that by nesting the em and the strong tags within the P tag before all right what else tags are normally indented when they're nested for readability and we've just literally done that with the div tags so you can see that it's going to be loads easier to read for you in the future when you come to edit your page and other coders when they're indented all right so that's pretty much it for this lesson um in the next lesson we're going to start creating a web page and you're going to start seeing results pretty soon and um yeah it's going to be fun so I'll see you guys then"
    },
    {
        "video_id": "SmPW4dZuaJY",
        "title": "HTML5 - Basic Syntax",
        "url": "https://www.youtube.com/watch?v=SmPW4dZuaJY",
        "duration": 235,
        "transcript": "hi as we have already gone through with the introduction of html5 now in this video we are going to see the basic syntax of HTML so if anyone who's not much family about the HTML implementation can go through this video and can see how to create the basic HTML 5 so let's start with the implementation for the basic syntax of HTML now to get started with the implementation of HTML 5 what I'll do first of all I will take an editor like notepad plus plus right here for Windows operating system so this one will be used for writing all the HTML syntaxes so I'll start with the angular tag like HTML and I will put a closing tag right after that closing tag would be having a slash just before the tag name alright so that means that we will start a document with the HTML tag and we will end it up with the HTML in between we will have a couple of main elements that is the head and once we will close the head we'll start the body and whatever we want to display in the browser will be put inside the body section in the head generally we put the title which will be called the means which will be shown in the title bar of the browser so here my sample page is the title and in the body I will put anything which I want to show like h1 like it's the heading alright as you might know that we have the six size of heading out there so this is the heading 1 all right in the head apart from the title you can put anything like script if you want to include any JavaScript vbscript or any particular kind of script out there you can put it right there in the head section you can include the CSS part out there and you can also reference to any pre find CSS or script file so this one head section will be used for the title and for any resources which you want to use further in the page like script or style in the body you will be putting all these style elements including the table heading whatever text images you want to show in the browser main window so once you are done with that you will save this document I will save that in the II drive html5 folder html5 - 4 demo folder like this one is the demo dot HTML alright since I'm working with notepad plus plus it gives me one more option of choosing the file type so here I have chosen HTML like hypertext markup language and after that I will click on this save once I have saved this window I will be able to find that in the particular location where I have saved it so I will come to that particular location like a drive html5 and here I can find this demo dot HTML I'll open it by default it is open in Chrome so you can choose your browser of your choice here is the title which I have placed and right after that in the main section you can find the h1 tag which I have put heading 1 out there in the notepad plus plus alright so this is how you can start with the HTML implementation and in the upcoming videos we'll see the new elements or the new features provided by html5 tutorials point.com simply easy learning"
    },
    {
        "video_id": "lyvIwQL0_Bc",
        "title": "02 HTML Syntax",
        "url": "https://www.youtube.com/watch?v=lyvIwQL0_Bc",
        "duration": 322,
        "transcript": "all right this series is going to cover the difference between html and css we're going to look at the structure and the syntax of each of these two languages separately we'll briefly discuss the difference between html and css to get started now html is responsible for the structure and the content of a web page while css is responsible for the style attributes and the visual components of a website so you can kind of think of html as the skeleton and css as the skin and the makeup and the hair and whatnot so they each play an important role in web design and we'll cover each one of these separately first we're going to start out with html and talk about the specifics of how html looks and its role in web design so html has a very simple syntax this entire line here you see is what we call a tag a tag is made up of first a tag name in this case the tag name is h1 h1 refers to a header tag or a heading tag rather so a heading one tag is the largest in the main heading of a website it's usually at the top of a website or the title of the article or something similar to that would be where a heading one tag would be used now tags can have attributes and values some tags require attributes and values and other tags they're optional but the attribute is before the equal sign and the value comes after the equal sign you can see how the value is in quotation marks you can have multiple pairs of attributes and values in one particular tag now this entire opening line is what we call the opening tag so i would reference this as the opening header1 tag or the opening h1 tag and you can see that tags always have these opening angle brackets and a closing angle bracket on either side of the tag some people call those chevrons i just refer to them as angle brackets all right the content of the tag is just simply referred to as the tag content it's the visual aspect of the tag whatever is inside of the tag content is what will show up visually actually on the web page so your users will see that the last portion here is what we call the closing tag so you can notice the closing tag has a forward slash before the tag name and that's the basic syntax of html tags once we get into a few code examples we'll walk through this again slowly so you can kind of get a comfortable idea of how these tags work now a typical tag is structured inside of an html page as you see here this particular tag has is a ul tag ul stands for unordered list and basically this will create a bulleted list and you can see that the ul tag is what we call a parent tag now the parent tag means that that tag opens and closes and there's children inside of that tag so these three tags inside of it which are li tags you can see there's list item one list item two and list item three those are all child tags and a general rule of thumb when you're building html structure that every time you have a child tag meaning a tag inside of a parent you would indent that over one tab space from where the parent tag starts and this may seem a little confusing at first but it'll become really natural once you start coding and once you start programming your web page through html it's quite a natural process so don't get too caught up in this right now again we'll look at this when we get into our code examples but i just want you to be familiar with the terminology parent tag and child tag now you could say that list item is a child of ul or unloaded list and you could also say ul is a parent of list item now this particular slide has one third hierarchy it has a header one tag that's a child of list item as well and list item could be a parent of header one or you could even say header one is a grandchild of ul now usually you don't use grandchild or grandparent you just stick with parent and child relationships i put in the third header one tag just so you can see that every time you have a child tag of a parent tag you indent it over one tab on your keyboard so this is typically how you'll see a web page structured this isn't actually requisite to build a webpage you don't have to tab that over as web pages will read the source code with tabs with spaces without spaces with dabs it's really just for human readability purposes it makes your code a lot easier to troubleshoot to program and to update so you do you're doing yourself a favor by including these tabs as you program your html a lot of code editors that you write code in like dreamweaver or text made or sublime text a lot of these popular ones they'll do this automatically for you as you build your code"
    },
    {
        "video_id": "kX3TfdUqpuU",
        "title": "Semantic HTML Tags | HTML5 Semantic Elements Tutorial",
        "url": "https://www.youtube.com/watch?v=kX3TfdUqpuU",
        "duration": 1478,
        "transcript": "[Music] hello and welcome hi i'm dave this tutorial is part of a beginner's html series i'll be using the chrome web browser the visual studio code editor and the live server extension for visual studio code to view the web page there are links to these tools starter code files and all resources in the description below documents need organization and our html files are no different html achieves document organization with semantics in this lesson we're going to improve our code with the semantic html layout let's get started i've got visual studio code here on the left with our index.html open and on the right i have got our index html page displaying and we're using the live server extension for visual studio code to display that page and you can see it's launched down here you can click to close or open the server you can search for that extension over here at the extensions icon if you do not have it again it's the live server extension okay so we're adding semantics to our index html page now we've already added some so let's highlight what we have done already as we've built this page out over the lessons the main thing that we have done correctly is add a hierarchy of headers you only want one h1 per page and this should be an outline much like you would have an outline for an essay or any type of paper topic you would write so this is your title for the whole page essentially and from there you can have multiple h2 headers which is one level down in the hierarchy and they would define subtopics and then beneath that you could have h3 headers if there was a subtopic of a subtopic and so on and that continues to h6 although you really don't want any more than about three levels of headings on a page so h1 h2 h3 would be the ideal way to have a page laid out after that we need to consider some things about semantic html writing semantic html helps us quickly see or read the different sections in a web page and navigate to those sections now we've already added a nav element to our page and nav elements are semantic elements so this says we have a grouping of links here and we can see that on the page with learning html and planning a vacation we have a grouping of links here that will help us navigate to the rest of the page we also have an hr which stands for horizontal rule in the past i believe i might have said these didn't really have a semantic meaning but they do they're currently viewed as semantic elements and it means that there is a topic change so something is changing and of course we have a couple of topics on our page and we have horizontal rules between those in the future as we learn css we may want to remove the horizontal rules we see here that divide our navigation and our heading for the page and replace those with lines that we can create with css because we're not really separating topics here although it doesn't hurt to have these horizontal rules in place at this time and the main thing to convey about semantic html is the word semantic that means it provides meaning as the nav element says hey this is a navigation area or the h1 element says hey this is a heading we can also get that from other parts of the page we added section elements that say this is a new section so they provide additional meaning rather than just a generic divider and we will talk about what a generic divider is later as well now in addition semantic html makes our pages accessible to screen readers and other assistive technology and that is very important as we create pages now while we've added some semantic html already let's add the three big areas that most consider for pages the first is not a head section but a header for our page now we have a heading which is the title of the page but we can wrap this in a header element and there can be more than one header element per page however it needs to follow the heading hierarchy so imagine if we had a social media site now every post whether it would be a blog post or a post like facebook or instagram every post could have its own header and it might have a subtitle in that post as well but this is a header now for our full page so this would be at the top level of our page with the hierarchy here of h1 which is the heading for our page notice we've also included the navigation inside of our header and we can go ahead and remove this horizontal rule and i think it will be just fine we don't need the semantic meaning of a change topic there and i think it's going to look okay without the line as well so let's save this now and we can see live server updates our page immediately so we can see the change and really all we see visually is that our horizontal rule is removed however we have added some extra meaning to our html here now that this is the heading or the header section for our full page now the next element we want to add is the main element now there can only be one main element per page and by definition that would make sense you can only have one main area for content per page and so we'll start here and it's going to include our sections that we've created so i used ctrl x to cut the closing main element tag and i'll scroll down to where our second section ends before our area here at the end and i'll paste the closing main element and save and we can see visual studio code reformatted for us so now we've got the main element wrapping our two topic areas of vacation and of html so we've added a header and a main element now one other thing we can add for our page is a footer now just like the header there can be more than one footer per page and that might be a footer for a blog post or a footer for a social media post but this is the footer for our entire page in this example once again ctrl x to cut that closing tag and i'm going to wrap everything we have here at the end in the footer one other thing i want to add just because i didn't do it before we validated our page throughout the other lessons and it's not an error it's not a problem but i want to include this information here about the copyright i want to include that in a paragraph element so i'm going to make sure that's lowercase why am i getting a capital there we go and then i'm going to once again cut the closing tag and put it after the content and save it gets reformatted it really doesn't change the look i just wanted both inside that paragraph and that might help in the future when we want to format this area as well with css so now our document has been outlined into three major sections we have a footer a main area and a header and then inside the header we've already discussed we have a navigation element that is also semantic html our list is also semantic html we know right away that this is providing a list and this would be identified by assistive technology as well now there can be more than one nav element per page so we might have a nav area in the footer footers often have links to other areas of a website now we've only got a couple of links in our footer and one goes back to the top and the other does go to our about page however it's not a grouping of links where we would organize if we had several other things here i might consider a nav and if you do have more than one nav element per page it's important that they are labeled so assistive technology knows which nav is which and here we can do that with an attribute called aria dash label and then we can set it equal to something that clearly says what it is like primary navigation and now we have labeled rnav as the primary navigation area if you did include a heading in the nav element which is not required but if you did you could link to that so you could have an h2 here and then in the h2 we might put primary navigation if i can spell it there we go and now let's give this an id and here we'll give the id the same value primary navigation and then here instead of aria we would say aria labeled by is the correct attribute here now we're looking at our primary navigation value and it's saying hey it's labeled by this value that's in the h2 so you can link these together with an aria labeled by pointing back to the id of a heading however since we're not going to have an h2 in our nav i'll go ahead and remove that and you can just choose the aria label attribute and set that equal to primary navigation which is equally accessible to screen readers and other technologies okay let's scroll down into this main area previously we broke our topics html and vacation into sections which are semantic html tags however there is a more appropriate tag now that we kind of have an idea of how our page is laid out because these are areas that could be on their own maybe they would each have their own page but much like a social media post or a blog post some type of article you might think there is an article element so i have highlighted this section and i'm going to type article instead and i believe we'll find that vs code changes our closing tag immediately yes and it was already changed to article so instead of a section let's call this an article because it clearly has its own topic and now let's do the same for our other section based on vacation so we can highlight it change it to article and we'll verify that the closing tag is also article and yes it is right here so now we have two articles instead of sections now there is sometimes a debate about which should be used and it's really not clearly defined if article or section is the proper choice they would both pass a validator check so really the way i look at it is an article has a clear topic where a section is more generic you might use a section just to actually create a little section in your code whereas an article has a clear topic that the area is about so now inside of the article we could create other articles but now i want to go ahead and add a couple of sections inside of our html article so as our article begins we've got the heading which is h2 and it says i'm ready to learn html and then we have a paragraph saying this is my first web page that's fine let's go ahead and add the section after that point and now once again i'll press tab to get both the opening and closing tags i'm going to highlight the closing tag ctrl x to copy it i'm going to bring it down here to just underneath the figure and that's where we'll end this first section i also want to go ahead and add a subheading here which is an h3 and i'll just make this html5 as that's what the section is about and now our section has the subheading html5 it has the html5 logo and it has our figure that has our code sample of html5 that all seems related now let's add another section and this is the my daily schedule section so lowercase again is what i prefer and so we'll have section and the closing section tag i will cut that and i'll put it here at the end of the list before the closing article tag so now we have two clear sections inside of our article and they both have headings that are h3 so we're at the third tier of the heading with the h1 being the heading for the overall page the h2 being the heading for the article and then the h3s being the headings for the nested sections within the article so we're keeping our hierarchy in place underneath the list we can add another element and just a little more content let's call this an aside this is a semantic element and if you think about how a web page is laid out often times you think of an aside as the sidebar to the page but it could also just be another section of complementary text that is not as important as what's in the main section or article that you are putting it inside of and that's what we'll do here and then i want to use some other semantic elements just to demonstrate how they work so now i'm going to add a detailed semantic element and inside a details element you want to add a summary element now the summary if this was a product we might just put warranty information in here as the summary here i'm going to put something that's more like a question and it will display how the details and summary work so i'm going to say guess the number of hours i code per day as our summary now underneath we can put the answer to this question and now i'm going to put i start at 8am and i write code for let's say three hours every morning and we can save that i'll scroll up so we have it up here towards the middle of our page and now let's scroll up here and let's look at what we have on the page because the rest of our semantic changes really didn't change the appearance here but this where we added this new content notice we're not seeing this paragraph at this point we just see guess the number of hours i code per day but it has this little arrow next to it if we click on this then we see the answer so that's a nice little addition that this html element adds and again these are all semantic elements so the aside has some meaning that it's complementary text it's not as important as what's in the rest of the article the details and the summary work together so this could once again provide details about a product say warranty information something else a return policy whatever but you could also use it kind of as a quiz here where you have a question and an answer let's go ahead and add just a couple of more semantic elements to this one is what we can do with a highlighter just like you might use a highlighter on a piece of paper there is an element called mark so i'm going to mark what i want to highlight here in the text and by including it in the text you know it's an inline element and not a block element so now if i save that we have highlighted number of hours now inside the answer we're looking at some time here we have 8 am and we also have a duration of 3 hours we can add some meaning to that in the text as well and we can provide a time element then we need a date time attribute and for the date time attribute value i want to put in the actual hours it accepts several values so this would be 0 800 on a 24 hour clock and now let's put the closing time element after the 8 am here and notice if i save this right now and show this it does not change what 8 am looks like at all but once again it provides meaning in our html for technologies that are reading it especially those assistive technologies but it could also provide some meaning for the browser itself now also it says as i write code for three hours we can provide a time element for the duration too so we have time once again with the date time attribute and now we'll put in a different value because there is a value for duration i'm going to put this closing tag at the end of the three hours now let's look at the value for duration we would put in pt3h and remember there is a link in all of the html resources that i link to in the description there is a link that shows all of the html elements so you can look up for example the time element on the mozilla developer network that's the mdn site and you can look at all the values that could be accepted for the date time attribute okay let's save this and move down to our vacation area where we also want to add two sections i think these are clearly defined already where we have subheadings for places i'd like to visit and really we have a subheading for places i don't want to visit i believe so here let's go ahead and add a section again lowercase and i'll take that closing section tag highlight it ctrl x to cut i'll scroll down here and we'll add that before the next subheading so there we go and save that and of course it reformats again now i'll add a section element and put the closing after we finish our places i want to avoid section and that would be at the end of our description list and we can save that now we've got two sections inside of this article as well and really once again it doesn't change the look but it does change how the browser interprets and it definitely adds a benefit for assistive technology now before we look at our document outline with these changes i want to quickly discuss and i'll just do it here by this comment where it says add more places two different elements that you want to avoid as you're learning html and then later on you can use them as we possibly get into them with css but there is a div in an older html code you will see divs everywhere sometimes you still do when those people that have been using divs are used to still riding them and they just continue what they've been doing in the past however there is no semantic meaning to a div think of a div much like a section without the semantic meaning it just stands for divider and really you can put them anywhere but if you do you really have to do a lot of work to get them to convey meaning you have to add additional attributes that help assistive technology interpret these elements because they have no meaning as is they are block elements so a very similar element that is an inline element if we just wanted to wrap a word or two in a paragraph in an element is span we'll definitely use some spans as we learn css however once again they have no meaning whatsoever by themselves they don't change or add any value to your code and we would use them possibly to apply some css styling to some words that we would highlight around span so we really want to avoid both of these elements as you learn html really work on using semantic elements and then when you understand what semantic elements are and how to use them and then occasionally when just no semantic element is the correct choice that is the time that we actually should use divs and spans so i'm going to delete those for now and save our document and now i'll just scroll our code up to the very top and i'm going to do the same for our page over here on the right now what i want to bring your attention to i'm going to maximize the browser and we're going to go to the chrome web store and look at an extension we can add and that extension is html5 outliner so search for that you'll find html5 outliner you can click on that and i've got it installed already so mine says remove from chrome yours would probably say install here and it will look at our semantic elements and make an outline of our page so let's check that out okay i'm going to bring our page back down to the size we had it down here to the bottom now once you've got that extension installed you may have to restart your version of chrome to get it to work but here we go click on html5 outliner and look we have got an outline of our current page so we've got our heading hierarchy correct with my goals for the year an untitled nav that's okay we didn't put a heading in there like i said we could have put an h2 it's just saying we didn't have one but a nav doesn't require one but remember if you do have more than one nav element per page then you do need to at least appropriately label that for assistive technology okay now we've got another section this is our article i'm ready to learn html and that's our h2 heading inside the article remember we have two sections we have the html5 and my daily schedule and then we have an aside and this aside was inside the second section it's also untitled which is okay and a side does not have to have a heading but it just notes that as it's untitled here if you added a heading inside of the aside say an h4 then it would of course appear there now we've got our other section this our other article actually this i am also planning a vacation that was an h2 and then these are h3 headings so you can see how important the headings are the heading hierarchy if you don't get any other semantics correct in your page that's the one thing to really understand is the heading hierarchy of a page but all of these other semantic elements definitely help outline your page and add meaning avoiding these is the biggest mistake you can possibly make as you are constructing an html page okay now that we've looked at our outline let's once again validate our page i'll pull this over just so we see a little bit better i'll click file upload we're at validator.w3.org and i'm going to click choose file i have to make sure i'm in the right lesson folder i am not so i need to go into html course lesson 7 index.html just make sure you upload the index.html you were working on for this lesson click check and we'll see if we have any problems if you have a problem it will show here it should tell you what line and what the problem is but we're good to go document checking completed no errors or warnings to show remember to keep striving for progress over perfection and a little progress every day will go a very long way please give this video a like if it's helped you and thank you for watching and subscribing you're helping my channel grow have a great day and let's write more code together very soon"
    },
    {
        "video_id": "fhoDRB53DwY",
        "title": "Semantic Tags  in HTML | Sigma Web Development Course - Tutorial #11",
        "url": "https://www.youtube.com/watch?v=fhoDRB53DwY",
        "duration": 642,
        "transcript": "What's up guys, you are in the 11th video of the Sigma Web Development course. We have completed 10 videos. So one like is enough for the consistency of all of us. In today's video, we will see about Semantic Tags. Because they are very important for SEO. And to understand the structure of the overall website, search engines are very happy to see this structure. That is, overall SEO of your website is going to be very good if you use these tags. What are these tags? Why are these tags? How to use them what are the benefits, we will see in this video let's go to the computer screen let's roll the intro so guys, first of all, I would like to tell you what are semantic tags here you can see that I have made a folder named Video 11 and here I have set a title by putting a boilerplate template of index and html by putting an h1 and setting this image, I am going to preview it here. So this is the image, to explain a little bit, I will tell you what are Semantic Tags? Semantic Tags are for browsers and weblers who want to understand your website properly They tell them what is the content of your website and what is the purpose of which place and which tag If you don't use semantic tags in HTML, then your work will be done It's not that if you don't use semantic tags, then your website won't look good You can do good designing. But we want to explain to Google and Bing search engines about our website. And if we explain them about our website, then they will be able to understand our website. And they will rank our website on Google, Bing, and on the respective search engines. And we want the crawlers can understand our website and we want that whoever wants to understand our website they can understand it well that's why there are some special tags like header, nav, main, article, figure all these special tags are made in html which help you to structure your website now if there is something in the header then I know that it is a header that is, it is at the top if there is something in the header, then I know that it is a header, that is, it is at the top. If there is something in the footer, then I will understand that the website has started ending from here, this footer has started here. This footer could have been div, but no, if I am using semantic HTML, then I will use the footer tag. Along with that, where I was making my navigation bar in the span tag, this time I will not make my navigation bar in the span tag, I will make my navigation bar in the span tag, this time I will not make my navigation bar in span tag, I will make my navigation bar in nav tag. So these kinds of differences explain our search engines very well about what our website is about. So I show you some examples of semantic tags here and I hope you have what are semantic tags now see there are download folders of our computer many of you download folder as if you have downloaded all the files of the world 90% of your computer's files are in the download folder of many people but we should not do this some people go to this extent that they start spreading files in their local disk C or windows folder and some people keep files in system 32 also. So if you spread your files in your computer, Then it is not arranged in one way. But if you arrange it in folders, That you have this file in one folder. If you want to keep a secret file in a folder, You put secret files. You can make a folder, With the name of do not open this. If you can put keep a secret file in a folder, you can put secret files. You can make a folder named do not open this. If you can put some of your files in it, then it will be arranged in one way. You have arranged the images in one way, you have arranged the videos in one way, and let's say you have arranged the e-books in one way. So whenever you go to find it, you will get it. So it will be much better for you to understand that folder structure instead of if you are spreading your files throughout the computer You definitely don't want to spread your files throughout the computer So I hope you understood why we use semantic tags It is very good for our SEO I haven't used the word SEO yet But SEO is a very important part of search engine optimization Using semantic tags. So what happens, basically I make your website the way you make it, you just use some special tags. For example, let's say I am making this website, I will comment out this image here, what are semantic tags, I will not comment it out, I will basically make a navbar here. So what will I do, first of all I will say that this is the header of my website, I have used a header tag, I will make a navbar First of all i will say that this is my website header I will make a navbar in this I will make an unordered list in this I will make an li in this and i will write home And after this i will write many more And this is my header So anyone who comes to my website will understand that this is my header Home, about, contact whatever i to write, I can write here. So, this is my header, this is my navbar, it is clearly visible because I have used header and nav tags. So, I write about here and here I write contact. So, here I wrote home, here I wrote about and here I wrote contact. So, I hope you understood this thing. Now, if I want a footer, let's say i want to make a footer here my main content will come after header so i will use main tag and after this my footer in footer i will write copyright cwh and here i will write all rights reserved ok, i can write like this so here see copyright all rights reserved, i have written like this. So here see copyright, all rights reserved, I wrote all this here. Did I... Yes, so what I will do is, I will cut this. I will put this in the main. This is my main content. So first my header will come, then main content will come, then footer will come, as you can see here. And here also you see, this is the header, this is my main content, this is the footer. So what I did in one way is, I arranged it. In a way, the way you arrange your files in different folders, I arranged it. In the same way, you arrange your files in different folders. I have arranged my HTML tags here. So we understood about the header tag that it is used to represent the top section of a web page. Which is a header. After that, we will put nav in the nav tag. Ideally, the article indicates a self-containing piece of content such as blog post or news article. If you put a particular self-contained piece of content, then put it in the article tag Section represents a thematic grouping Suppose one section is talking about one thing on your page The second section will talk about something else Aside means if anything is lying on the side, then it is used as an aside tag So here see, typically used for sidebars or content that is tangentially related to the main content. Like on the aside tag, what you can do is, if you want to put a side note, about the author, you must have seen many blogs where the side is also written, about the author. So you can put such things in the aside tag. Then after this, we have the footer tag, I told you about this, if you want to put copyright information, all these things, or if you want to put some important links of the website, then you can put that in the footer. Then after this, figure and figcaption. What is figure and figcaption? Whenever you want to use images, diagrams, charts, you can use figure and figcaption. In main, the main content area, like the main content area of our speech was this, we put it in the main tag. Then there is also a time tag, used to represent time-related information. So you can use the time tag, you can put date, time or anything in it. So I hope you have understood this thing now. So these are used to enhance SEO, to improve accessibility. And if browsers want to take a decision about our page, Let's say there is a browser, it has a new feature that it will read our content aloud like Edge has a feature, so the browser can decide that I am only reading the main content now think if someone wants to read this page aloud, then how will he read it aloud code with Harry, home, courses, tutorial, you don't want to read aloud like this you want to read the main content. HTML, Semantic Tags. HTML5 Introduce, Arrange, Semantic Tags. The first versions of our HTML, They didn't have Semantic Tags. Semantic Tags were introduced from HTML5. And the most important reason to introduce Semantic Tags in HTML5 is to arrange things. So that the browser or whoever is parsing the content whoever is looking at the code of our content, whether it is a browser, crawler, google, bing, search engines or anyone who wants to generate a preview, like you put a URL on Twitter and want to generate a preview, if there are such things, then you will want that your content can be understood properly, so if you want your content to be understood properly, then you will use semantic tags. Here this image is explaining very well that if you write HTML without semantic tags, then you will write like this for semantic tags. This image you are seeing, this is a header, this is a nav, this is a side. How to throw one thing in aside, we will do all this with CSS. Don't be confused, this is not used for styling. Because many people get confused that Is it used to assign things? No, it is not like that. You have to style things with CSS. But here Your content can be understood well. Can be described. Which is the main content, which is the header or footer. That's why semantic tags are made. So semantic tags do not do any magic. why semantic tags are made Semantic tags don't do any magic Semantic tags are made only for accessibility And to understand your page Now here are some examples that you can see I have given the example of header and footer tag What will happen inside the header Here you see that you will ideally put your navigation bar inside the header And then you will style it with CSS I will show you a very quick styling Obviously we will talk about styling later but many people must be thinking how this navigation bar will be horizontal so if you want to make the navigation bar horizontal then I will write some CSS here and I will tell you all this why does CSS work here so you see I have flexed the display so it happened like this so a lot of things are going to happen in the coming videos so don't worry at all at all. That we didn't do this, we didn't do that. I will tell you everything. And the CSS I wrote here, what does it mean? Why did I write CSS by inspecting? I will tell you about this too. I will reload, it went. Why did it go? We are going to see all this in the CSS section. If you have not accessed this playlist yet, then do it. Bookmark the accesses. Click here and save it. And I am uploading all the code so as you move forward in the videos, you will get all the code here do start this repository if you haven't done it yet and also like the video thank you so much guys for watching this video and I will see you next time Thanks for watching! you"
    },
    {
        "video_id": "bOUhq46fd5g",
        "title": "Why &amp; When to Use Semantic HTML Elements over Divs",
        "url": "https://www.youtube.com/watch?v=bOUhq46fd5g",
        "duration": 721,
        "transcript": "in this tutorial we'll discuss why and when to use semantic HTML elements over divs alright so I just have a couple of examples for you but first of all why do we even want to use semantic tags instead of divs well first of all it's easier to read and scan the HTML if it has been properly structured with these semantic tags and I'll show you why in a second it's also better for SEO it makes it easier for those search engines like Google to come to your website and properly index all the contents that's on there which in turn will make it more likely that you rank higher in their search engine results right so you get more traffic and it's also better for screen readers or assistive technology and to properly you know categorize and index what's going on on your websites once it's also better for accessibility these are the three main reasons for why we want to use semantic tags so let me actually just give you an example of what a very typical HTML boilerplate would look like so this is currently basically an empty HTML file now globally speaking you're gonna have a header usually a main section and a full footer section and so these are already semantic tags because you could also use divs right you could use divs this stands for divider right you could you could use that practically they would work the same but in practice if you want to use semantic tags this is what you're gonna get so header is usually for introductory content you know the logo like the introductory links the main is really for the the dominant content on the page and the footer is for you know maybe some other links like terms and conditions privacy policy not really important stuff going on there so in the header then typically you also have some kind of nav so the nav is really for the most important links on the page or the like the most important navigation on the page typically people structure it like this so you're gonna have a list of links so in a list we have Li so it's going to be quite nested here and then in here you're going to have the actual anchor tag and so usually you're gonna have a bunch of links here and then maybe you also have like a logo right a logo that could be just an image let's say and so you would have an image in the in the header and then you would have a nav right so it's quite nested here but this would be a pretty typical semantic structure in the header then in the main the dominant content on the page usually you're gonna have a bunch of sections as it's called right so in practice a lot of people use div but it's better to use section and I'll show you some practical examples on real world websites in a second but usually the main consists of a bunch of sections right and then in the section you can have a heading right so maybe an H1 or H2 and you would say something like about us maybe or maybe some kind of a benefit section let's do this it's a bit more realistic and then perhaps a paragraph section with a bunch of words and that will be a section and then you would have another section benefits instead of benefits we would have something like um how it works right and maybe some paragraph with a bunch of text so in practice what you see a lot of people do is they use div hair but it's better to use section so why section instead of div and I'll show you that in a second on real world exercise websites but in practice what you also have in the main sometimes is have some kind of sidebar or some related content that's not really the not really something that should get the focus but you could have something like an aside in here as well that's also what you see sometimes so this could be for a sidebar or something like that you're also going to see the article tag sometimes it's a bit trickier this one this one is more suitable for if you can pull out this content and place it somewhere else and it wouldn't lose any meaning right so this is a bit more rare and then in the footer usually um you know you're gonna have a bunch of links maybe some text but here you would also use that nested structure again except now you wouldn't use the nav now so nav is typically more common in the header because this is actually meant as you know a really important that of navigational links or you know navigational section if it's really important this probably shouldn't be in the footer alright so here you wouldn't see the nav tag alright so this is really common uh a you know semantic setup that you would see and now we're going to look at some actual websites to see how they've done it and I'll show you some of some examples for those more rare tags as well like article and aside all right so this is the stripe website but honestly I could have picked any landing page because they're they're all quite similar so we can inspect here and we can see how they've marked up their HTML so in the at the top we indeed see um a header here right so here they have a logo they have a bunch of important links and they have this sign in button right so there's a header for them and they have a bunch of divs in here in here because sometimes you need to use a div simply for stylistic purposes let's see if we can find a good example here doesn't look like it maybe we'll find a good example of that later but here we have a section so this is what they call the the hero section right really the the the the thing you look at first when you when you come to the website this is a section because all of this is related to each other it's like a way to introduce their company or their product it's all related to each other this heading and this text and this this graphic it's all uh it all has the same semantic purpose and that's why it should be a section and not just a div right so if it would not be related to each other and you would only need some kind of element just for layout purposes from stylistic purposes you would use a div right then we get to this section here and let's see so they used a section tag again and this is actually just a bunch of images actually right these images well what what it represents is the type of companies that use as this is like credentials for them and because each image here belongs to that same semantic purpose they all should be in a section tag and not in a div because a section means that the content in there is related to each other it has the same semantic purpose so it's better to use the section tag now why not use the article tag here but article tag means that I should be able to pull this out of here place it somewhere else and it would still have the same meaning or it would still be clear what it means but if I would take these images out of here and I would put it somewhere else on a different website or somewhere else it would just be a you know collection of images it wouldn't mean anything it wouldn't mean the same as it means here which is that these companies use stripe right so this only makes sense in the context of the striped website and therefore this is not the article tag but a section tag alright so then if we go down you're going to see a bunch of other sections they have that showcase why people should use right so they want to convince the viewer to use strap so here let's see this section it has to do with an overview of their product and it's a section tag because all of this in here is related to the to it to a an overall semantic purpose right so this heading is not some stand-alone random piece of text right it's it it's a heading that describes everything else that's also part of this and so it's all related to each other right that's really what it comes down to with Section versus div right this is a section this is a section and usually it's quite easy to identify them on these landing pages but this is a really typical example of sections versus divs all right now let's take a look at the mdn website the developer.mozilla.org so if you go to one of their articles you can see that we have the actual content we have some header on the top and then we also have this sort of sidebar let's see how they have marked this up so here we can see um this is the main content so you're only gonna have one main tag on your page because it's for the most dominant content on the page and they've used an aside tag for this sidebar here right and actually you could make the argument that the aside never should be in the main because it's not really part of the dominant content right so um you could make that argument and then in the main we see an actual article tag here so here they actually chose article instead of section so article is actually a bit more like there's an additional requirement that's how you can think of it the section just means that everything in there is related to each other or it has the same semantic Purpose with article the same has to be true but I also need to be able to take this out of here and put it somewhere else and it should still make sense and that's actually the case here I could take out this all of this text here you could put it somewhere else but it will still be the same it would still have the same value essentially right so it will still be clear what it is and therefore it should be an article tag another example would be if for example they had some kind of job posting here right maybe they they have some kind of um you know job post that would also be a good candidate for an article tag because I could take the job post out of this website I could put that somewhere else maybe on like um a jobs website and it would still make sense there right I could put it on any other website and it would still make sense that article tag is self-contained it explains itself it you can you can look at it you can read it you can consume it and it's clear what it is what its purpose is what it represents and therefore you want to use an article tag now this is quite rarely a site and article tags you don't use that much you don't use it often in most of your projects you're gonna use the section tag and a bunch of divs okay so here they also have some kind of navigation here so this is maybe interesting to look at as well so here they use the section for that actually they use a size for this overall piece and then they use a nav tag again and that's right so you're not only going to see a nav in the header but also sometimes outside of there if it's important set of navigation which it is right so this like a table of contents isn't important uh piece of navigation so you could opt for using the nav tag there this all may seem a little bit confusing and overwhelming in practice you know if you would if you didn't use nav here but you used just an UL perhaps or maybe a section instead of an aside all of that is generally fine in practice um you know it it doesn't matter that much for readability of your HTML the search engines don't really care that much I mean they must be pretty Adept at this point to dealing with with unstructured HTML because most websites out there are quite unstructured so all of this doesn't make that much sense and you know to to spend a lot of time and energy on but you know if you want to be precise about it that's how you would do it now I want to give you one example of where you would use the div instead of the section right because now we've seen a couple of examples of where to use something else than this so then where should you use actually where should you actually use divs well basically everyone else so here for example and this is one of my projects from my CSS course here we have a bunch of like we there's some uh well these are breadcrumbs and then we have some other button on the other side now this is not really related to each other they just stylistically speaking in the same uh white bar here but they have different um purposes right they don't have they're not they don't belong to the same semantic purpose but they are still stylistically in the same bar here and therefore you probably need some kind of element in your HTML to get the proper layout so in that case um you want to use the div actually right so here there's some kind of info bar but they're two different things this is breadcrumbs I use the section for that because the text the text in there they all belong to the same uh well overall semantic uh goal and this is a button tag but they are two completely different things they don't have anything to do with each other but I still needed some kind of element month to get this layout right so here I would I would not use section I would use a dip by the way if this was helpful I'd really appreciate it if you could like And subscribe also check out my courses on CSS and JavaScript if you want to take those skills to an advanced level because in there we will build some beautiful real world projects from scratch so you can see how everything fits together and really Master CSS or JavaScript and I will also release other courses from like react and node.js so if you want to be notified then make sure you are subscribed to the email newsletter you can find the link in the description thanks for watching and I hope to see you soon"
    },
    {
        "video_id": "8qBPKXRUOnk",
        "title": "10 Input Types in HTML Every Web Developer Must Know in 2024 | HTML5 Input Types Tutorials",
        "url": "https://www.youtube.com/watch?v=8qBPKXRUOnk",
        "duration": 761,
        "transcript": "assalamu friends welcome to hma web design in this video we are going to learn the 10 input types in html which are mostly used to create html forms first of all please don't forget to press like button and subscribe to my youtube channel for the latest updates let's start the video first of all let's start creating an html form tag and inside the form tag we are going to create the our input feeds which will be included in our form first of all we have to write the label tag label tag is used to describe the input field first input is enter first name the type of this input is text and name of the input is first name [Music] placeholder is first name placeholder is just a faded text which will be displayed inside the input field hr for the horizontal line to separate the each input in our form and our second input type is input type password let's copy paste all the above input and let's change this enter password type of this input is password this input will allow user to enter password and password will not be displayed to the user and is the output this is we can enter password now let's move further our next input type is input type submit [Music] hr for the horizontal line let's copy and paste the previous code and we are changing this code this input type is submit name of the input is submit and value of this submit this will create a submit button which will be used to submit the form [Music] our next input type is type reset this will create a reset button in our html form which will be reset all of the input field which have been filled earlier [Music] this input type is reset value of this input is reset this will create a reset button in our form so here here is here is it let's type any password and press a reset button then password will be reset [Music] now our next input type is type radio let's create a label tag what's your favorite color this is very important input type in html forms [Music] this input type will allow user to select only one input from main inputs input type is radio and name of the input is color first value is that second value is green let's create a third value which is black and name of the input should be same which is color and value of this input will be different this input will allow user to select only one option out of many given option out of multiple option user can select only one option now let's move further next input type is check box this type is very similar to radio type but the difference is that in this input user can select more than one option [Music] so here the name of the input will be different in the previous input radio type we have written the name of the input same and in this in this input type name of the input is different which will allow user to select their favorite route type is checkbox input name is fruit2 fruito is apple let's change third input banana value of this input is banana and name of this input is fruit3 [Music] name of all this input will be different because user can select multiple option in this input as we can see here we can select all option as we want next move further the next input is input type button let's write label tag what is your name let's create input tag and input tag in html don't have an end tag it is only a single tag input [Music] type text name of the input name now next input type button and value of the input is submit this input will also create a submit button which will be used to submit the form data to the web server here is our input we can submit the name using the submit button next right here we are going to write the next input type next type is input type file the file input in html is very important which will allow user to select and submit any file from the computer label for computer input is file select a file to upload [Music] input type is file name of the input is file id is file and this id should match to the for attribute in the label tag [Music] id attribute will be similar to the for attribute user can select here only single file [Music] if we want to select multiple file from our computer so we have to change our input with the attribute like multiple this multiple ad report will allow us to select multiple files from our computer now we can select more than one file and upload these files to our web page our next input type is type image label for image what is your name we can also make image input we can also use any image or input when user click click on this image then data will be submitted let's create this image source of this image logo dot png this is this is the image name and id of this input is image no user can submit the form data by clicking on this image let's refresh our page this image has been created here we need to [Music] decrease the width of the image let's create a couple of line breaks to display the input in separate line [Music] here we have to write label for name because we are demanding the user to enter their name input type text name is name a placeholder is name no user can enter the name in this input field now we can change the width of the image less 50 pixel now image size will be reduced to 50 pixels now when user press on the image the data will be submit to the server [Music] next input type is input type search [Music] the label tag label for search search here now let's write the input tag input type search this input type will allow user to search the information this input type is specific to search purpose the id of the input is search now this search has been created [Music] we can also disable the auto compilation in the search if we add the autocomplete of then the search suggestion will not be displayed when we click inside the search you"
    },
    {
        "video_id": "KqJikDzb3l4",
        "title": "HTML Tutorial: Forms &amp; Input Tags | Web Development Tutorials #8",
        "url": "https://www.youtube.com/watch?v=KqJikDzb3l4",
        "duration": 1309,
        "transcript": "Guys, now we will see about HTML forms here. I've explained a lot of things here. We discussed many things, you must have accessed and bookmarked my playlist. Now I'll go ahead from here. I'll make a new file. I'll name it tut8.html and it's necessary to apply a boilerplate code here. Today we'll talk about forms. Forms is a very important HTML topic. I'll explain from end to end, what it is and how you can use it. I'll quickly take h2 here. I'll write This is form tutorial. I'm applying h2 because I feel h1 is too big. You can do this according to your site. I've opened the live server by clicking below. And now we'll add form tag here. I'll tell you later that when you write form, below it many things are being suggested to you. I'll only press enter now. Immediately, it asks what form action should be. This might confuse a beginner. I'll explain it slowly and in detail. You'll use a backend. You'll give your form to a backend. Suppose I use PHP as a backend, then I'll tell it to go to backend.php and submit data. I'm not saying I'll use php here, it's just an example that action is similar, it's an endpoint where all the data from the form gets submitted. I've told my form to submit it in backend.php. My form will say okay, I'll submit data in backend.php. Which data? The one given by my user in the form. As soon as I make form tag, HTML won't get updated. I haven't added anything to the form. I'll now add things to my form. Suppose, I can add input tag. I can add different kinds of things in inout. What's an input tag? Where the user will give input. Your input can be text, button, checkbox, date, time, email or file. Let's take a simple input where type=text. And with that, I'll write Name:. I'll write name and input type = text. I can write my name here. Then, I'll press ctrl + D. It won't work if you haven't configured ctrl + D. I explained how to configure it in the last video. And here I'll write Role:, type = text. You can see that role is in the same line. I wanted it in the next line. I have 2 options now, either use a br tag for line break or what I can do is, it's a better technique, I'll use a division tag or div tag. What's the use of div tag? It's used to bring a division. I'll tell you something now. If I add it here in this way, this here and this in the div. I've put them in different divs, see how. The code is in front of you. See the effect of doing that. It came down. This happened because my input tag, that's an inline element, span is an inline element. And what's div? Div is a block element. It takes up an entire block as width and the next element has to go down. That's why I've used div, we'll discuss this later. For now, skip what's inline and what's block. I'll explain it well. For now, we used div for it to be in the next line. I don't recommend using br tag. We'll avoid br as much as possible in our design. So, I did this, and then, even if I use a br, nothing will happen. There'll only be a space and my form will look good but we'll achieve this using css, using margin and padding. I won't recommend using br for margin and padding. You can use br too, you can use the horizontal rule we studied, there'll be a line in this way which obviously doesn't look good. That's why I'll remove it and only use br for now. But br isn't recommended, I'll keep saying this. I don't recommend br. I've written name and role. Then, the types for both were text. In input, we also have type email. So, if I copy this div and write email here, then I can write type = email. I'll erase this and show you again. If I write input : email and select this, then it automatically takes type = email. It's asking for name and id too. I'll explain what an id is later. I'll explain what a name is now. Name is what your backend will recognise this by. When putting data in backend,  like I'm doing in backend.php, so backend.php has to identify everything. It'll say this is my email. So backend will have a way to take value of myEmail. Along with this, I'll give a name here. I'll give it name and myRole. Here again, I'll put in myName. When I submit this form, the backend I'll be using will have a feature to take their corresponding values. I'll explain this in detail later. No need to worry at all. I'll copy br too as I'm taking it with me. But br is not recommended. When using css, we'll use br as little as possible. See, it looks like this now. But how do we submit the form? For submitting the form, again, I'll do this. And here I'll write input: submit. So, I'm taking the help of VS code which has all this. I'll write value = Submit Now. As soon as I write submit now, it'll be in my button see. Submit Now. If I make it br, then see this. Now it looks better. This is HTML forms tutorial. You can write name, then you can write role. And then you can write email. And as soon as you submit, mine won't be submitted as there's no backend.php, it'll redirect me to backend .php, see. It shows me an error saying there's no backend.php. See, it has put all the values in this url. We'll not see this much. For now, just understand the methods and types in which you can send your input. We saw text, we saw email. Along with that, we also have date. I'll show it to you. Here, if I write a div again, and if I write input and datetime here, I'll save it and show you what it looks like. Had I written only date instead of datetime, I'll click ctrl + S now, it shows dd/mm/yyyy, I can select a date. It gives me a whole calendar, HTML gave this. I didn't do anything, HTML gave me the picker. You can add date in this way, I'll add br too. I'll write date here. I'm skipping name and id for now. In name, whatever you call it, your backend will return it corresponding to that key. You can grab it from there, I'll show you how. I'll make it myDate. You can see everything here, you can input date too. That's how we have inputs. Here, I'll write br again. I've told you many things, there's also type = number. I'm explaining things as I remember them but these are not the only types. I'll write mynumber here. I can write anything,  I'll write myBonus, the amount of bonus you want. You can only enter a number here. By doing this, you can enter a number like this, you can increase or decrease it. When you'll style it with CSS, it'll look even better. I can only think of these for now, numbers, a radio button and checkboxes are very important. I'll show you how to radio buttons and checkboxes. Here, Are you eligible? You can make it input type = checkbox. And this checkbox will be myEligibility. Now we'll reload it, are you eligible? You can have this checkbox like this or like this. You can click on it to have it checked or uncheck, check, uncheck, check, uncheck. I can grab its value in the backend. Along with checkbox, we have radio button. What are radio buttons? I'll explain where they're used. You can use radio buttons here. You can use gender too. Here I can write myGender. I write radio here and male here. And then I'll write female here. I'll reload and see, male and female. I'm able to select only one. Why? Because I've given them the same name, myGender. Both are called myGender. So, if you give the same name to checkboxes, only one can be chosen. And this makes sense too. You could be either male or female or other. I'll add other option as well. So, you have to select one out of the three. And you won't be able to select two if you try to. See, it's either male or female or other. You'll be able to select only one because I've given them the same names. So, these are some of our basic input tags. I hope you must've understood. I explained radio button, checkbox, everything. I should've kept submit now at the bottom. I'll move submit now to the bottom. See how I'll move it. I selected this, then I'll press the alt key, beside the space bar, alt and down arrow key. It keeps moving down as I do it. I can move it down as far as I want. I'll move it down to the bottom. I'll save with ctrl + S and submit now is at the bottom. I told you input type = submit. We also have input type = reset. If I make type = reset and this as Reset Now, then see. You can see the reset now option. What does reset mean? To reset the form. Whatever I put in, on clicking reset now it'll be reset. I can fill in anything here. Suppose I chose a date and filled this and this, I fill the bonus amount, I can't put in text here. I can only put in numbers because its type = number. So, see and understand, I can see more space here. I'll see why that is, after email. I added br twice by mistake,  I'll make it one. It looks better now. So, you filled numbers and filled the whole form. As soon as you click reset, it'll be blank. It won't get submitted, mind the difference. Reset means it'll go blank. And submit means it'll go to the backend. I hope you understood this well. I've explained submit, reset and I want to add that you can also add e in numbers. Why e and not any other letter? I'm pressing others. This is because if I've to write 10 to the power. If I've to write 43 10 to the power 2, that's why it accepts e too. This is just fyi, so that you know. So you can enter e and numbers in type = number. In bonus amount, if you're expecting it in lakhs, crores use e because how will you type so many zeroes. So, we use e in such cases. I've explained almost everything to you. I think I didn't explain text area, I'll do that now. I'll make a div, I'll just copy this one. I've enabled ctrl + D shortcut from keyboard shortcuts. Copy is done using line down. I've made copy lines down as ctrl + D. For you it may be like shift + alt + down arrow. But I've made shortcut according to my convenience. Because I used to do coding in Pycharm, I've grown used to this shortcut. If you're used to some other shortcut, definitely use it. Here, we made male, female, other. I'll remove this and I'll use text area here. It's asking for a name, I won't give it an id. I'll explain what rows and columns are, ctrl + S to save. I'll write Write about yourself. See, here's a text area saying write about yourself. You can write This is about me, you can also change the shape of the text area. Text area is an element provided to you by HTML to take big paragraphs of inputs from users. If you see such a big area, that means it's a text area. We'll definitely style it, it doesn't look good now. So, write about yourself is here and this is here. I can solve this problem in this way. Using br is a dirty way to solve it. It comes down on using br. But again, we'll see how to do this using CSS. This form doesn't look nice, it's just functional. But yes, we learned a lot of things. We saw different input tags and text area. These are the most common input tags you'll encounter during your web development career. And with that, you also saw text area. I'll discuss rows and columns. If you increase the columns, say to 90, then my text area will widen. On making it 10, it'll narrow down. If I change the rows, I'll keep column 90, if I increase the rows, text area will be longer. See how long the text area is. But again, a smaller text area was better, oops. Ctrl + S to save, and see this. This form looks okay to me. So, I hope you understood forms in HTML. I want to tell you another thing. If you want to keep a checkbox checked, you can use this, where is it, checked. Due to checked, it's checked by default. So, it doesn't get checked by default, if you want it to be checked, you can use this. I hope you understood this well and I'll also quickly explain label tags. Suppose I want to add a label, I'll show one and you can do the rest yourself. I'll write label, then for = name. I'll take the id as name. I'll have to use the same id as before, listen carefully. I opened the label tag, then I'll write the label here. Label tells you what the label is. I used ctrl + S to save it. I wrote name in the label and then, I said it is the label for id = name. For = has the id of which it is the label. What is this the label for? For this. Its id is name so I put in name here. Now see what the benefit of this is. As soon as I click on Name, it gets selected. When I click on role it doesn't get selected but for name it does get selected. This is very useful in my form. On clicking are you eligible, checkbox will be checked. I want you to try it, add a checkbox to are you eligible. And when you click on it, checkbox will be checked. It isn't happening now but it will after adding for. I hope you understood this well. Along with this, another tag that I didn't tell you about, that is select. Suppose you're joining a company and getting a car. So, I'm asking you about the car you want. I'll erase this. Here, I'll write car. I'll apply label tag and write for = car. Using select tag, name wil be myCar and id car. Because id should be the same as for. In select, there's option. In option, value = Indica. Similarly I can write, it's not necessary to write Indica. I can write ind, swf or Swift. Suppose there are only two cars available for now. It'll look like this, I can choose either Indica or Swift. Suppose you want one of them selected by default, then write selected here. See, Indica is selected here by default. If I'd put selected with Swift, then that'd be selected. And obviously, I'll have to add br to make it look good. This didn't work, why? Okay, I had to use it after div. Now it'll work. See, a space has been created here. My form doesn't look amazing but looks okay. I added a label to name so this has come down. I want you to add a label to everything. If I click on car, see, it gets highlighted. If this is selected and I click here, this gets highlighted. So, we've discussed a lot about the form. Don't get worried that I gave you so much information in one video. You don't have to memorise anything. You don't have to rote learn this, you don't have to remember where selected is used, or where option etc. are used. No need to memorise anything. For now, just keep following me. Keep observing how I do things. As we go on building a website, it'll become easier. It'll feel as easy as watching this video. You'll build a website in front of me and you'll find it easy, learn to take reference from net. So, you don't have to memorise anything. If anyone tells you that you have to memorise all these then that's wrong. What's the main thing here? It's that you are using VS Code. If you write inp, it'll suggest inputs. If you enter input, these are readily available. So, it's not going to be difficult. If you face any problem, you can refer to this video. I'll give you the source code in my description. Go to the description and see the source code, you can easily use it using the source code. I hope you understood everything very well. If you haven't accessed the playlist yet, definitely access the playlist. If you liked this video, found it useful, then like it, tell your friends about this, that there's a web development course from scratch, I'm teaching everything. I want you to share this playlist to Whatsapp groups, bring others so they can learn too. So, that's all for this video. Thank you so much guys for watching this video and I will see you next time. [MUSIC]"
    },
    {
        "video_id": "tLBlhp0SA_0",
        "title": "Forms and input tags in HTML | Sigma Web Development Course - Tutorial #7",
        "url": "https://www.youtube.com/watch?v=tLBlhp0SA_0",
        "duration": 893,
        "transcript": "In this video, we will know what are forms and what is the input tag in the form. Using a form is a very important element of some websites because through the form, you submit data from client to server. These are the forms that you see on contact pages, Google forms or inquiry forms. The date and time to go to the flight or railway ticket, all these details we put, they also submit through html forms. In the last video, very few people liked it, I will request you to like this video with high energy so that we can maintain high energy throughout the course. So let's go to the computer screen, we will see about the forms, we will see about the input tags and we will see some best practices. Let's roll the intro. so guys i have come to my computer screen and now see i am going to make a folder here whose name i am going to keep video 6 because this is the 6th video i will do it with shift right click open with code i have already told you all this and here i am going to make index.html and by putting exclamation mark in it what i will do is i will wrap the view word i will turn on the screen cast mode and you see here i will write forms let's learn it so i have set the title of this forms page and what happened by setting the title that the title will be visible on our page here i want to tell you a very important setting of the show preview now many people have also pointed out to me in the comment that I have to click so many times, can I do something? Yes you can, click on gear below, click on settings And after clicking on settings, what you do simply Write live preview here, live preview And we can actually set it such that whenever we click So what happens is that it will open on the external browser so now I will close everything, as soon as I click here, it will open on the external browser and I come to my browser and the playlist of the Sigma web development course is being accessed by clicking here on the star and here on the bookmark but now I want to tell you that as soon as we click here, you see it opened so if you want this, then do this, but sometimes what happens is that you want to prefer side by side view. And when would you like to do that? When you are actually working on a design using HTML, CSS. So whenever you are working on design, definitely you guys would like to see live previews here. Which is why this extension was made. And it was made different from the live server so that you can see the preview on the side. Now what we will do here, we will know about the forms What is a form? You know the name of the form, it means a railway form We fill it and our reservation is done Along with that, we fill the form of IIT-JEE, the form of NEET, the form of any exam So that our data can reach those who want it So this is the form HTML is a form tag, as soon as you write form, you will hit enter, in this way, the first question will ask you, what is the action of your form, get or post, let me tell you a very quick difference between get request and post request, that is, we will see this thing later when we will read the backend, get request is a very simple request, and post request is when we send, in most of the cases, when we have to give a lot of data, like whenever our form will be posted so in most of the cases we will use the post request and get request is a very simple request that we have to tell the server something and that's it or we have to hit the server with a request that's it but if you don't understand this thing now that should be fine there is no problem because we are going to do this in detail so form action is equal to post I wrote, now I can show some input tags in it. I will tell you what are input tags, that what elements will come in your form, like you can put a date, you can put in the form, you can say name, you can say phone number, you can say what is your age, it can be just a number you want to put such things in the form, so I want to tell you here that the input tag that you put inside the form and there is a label tag which is used to label that input, so what I will do here you see the simplest input tag is type is equal to text so I will put the input type is equal to text here and you see here, if I zoom out and show you so see input type is equal to text here and you see here if I zoom out and show you so see here input type is equal to text, name is equal to username placeholder enter your username and it will look like this you can say here enter your username and the user in front of you will have to enter the username I will write an h1 here and I will write assume form to apply for ta for Sigma web dev TA. Sigma web development course TA. Assume we are hiring teaching assistants for Sigma web development course. So we can write something like this here. By the way, I have put the subtitles. If you have not accessed the playlist, then do access it. And with that, I will show you one more thing. So these subtitles are very funny. I'll show you. Write Sigma batch OP and your village land. And give your village land to me. I mean, if a foreigner is watching this, Or if someone is watching this who doesn't know Hindi at all, He will say, what happened so far? And give your village land to me. I like this a lot. Anyway, now you can see here that I have put the H1 here. Which is our heading. This is our main heading. Enter your username. This is our input tag, Along with the input tag, we use the label tag, Now whose label is this? So I will write its id for is equal to, For example, I will write its id username, And what will I do in for is equal to? I will put its id in for is equal to, Now what is this id? I will tell you later, For now, you just understand that this is a unique identifier of an element, To uniquely identify this element, Like your Aadhar number cannot be anyone else's, Now what is ID? I will tell you later. For now, you just understand that it is a unique identifier of an element. To identify this element uniquely, like your Aadhar number can't be of anyone else, in the same way, this ID username has been given to it, now it can't be given to anyone else. This is the ID. I will tell you more in detail later, but for now, understand this. So I wrote label for a username. I wrote this input and you can see here that the label will come here. So I am seeing here, I have not put anything in the label actually so I will put enter your username and you can see that as soon as I put this here you will get to see here enter your username after this you can enter your username along with that you can put anything here like enter your expertise suppose I want to ask here what is your gender so I can do something like this here and you see enter your gender and as soon as I did this here i can ask you from male or female what is it now what happens here is that sometimes we wrap it in div what is div? div is our block element okay and what are inline and block elements i have not told you in this course yet but i will tell you in the coming videos so for now you just understand that i am putting it in div to give a new space okay, so as soon as i put it in div, it will come in a new space. Yes, there is also a br tag, which causes line break. But I don't prefer br tag and you will get to know why. Why we don't want to bloat our html with br tag. You will find out in the coming videos. Now you see here that enter your username, male or female. Now you see here, as soon as I click on female, this radio button is selected. I am clicking on male, it is selected. Why is this happening? Because the label of this, I have put for is equal to female and here I have put id female. You can see. And along with that, you can see, I have put the same name of both of them. Here I have put name is equal to gender, this input tag too. And name is equal to gender, this input radio tag too. And as soon as we have written type is equal to radio, it is gender is input radio tag and here we have type is equal to radio which means this is a radio button and if we have made the name same then only one of these two can be selected at a time that is, if I select this, then only this will be selected if I select this, then only this will be selected now I will show you one thing if I mess up the id in the label form and here also in the form id means I don't mess up the first one I mess up the second one so when I click on the female of the second one, it will not be selected. I'm clicking, it's not being selected. I'm clicking on the male, it's being selected. So to select the female, I'll have to click on this. So what I should do is, I should always put the ID of the input tag. So you can see here, I've put the label for is equal to female. Along with that, we have an input tag which is type is equal to female Along with that we have an input tag Which is type is equal to check box Now see here if I put the input of type is equal to check box I will do this work by putting it in div Right click and format document As soon as I do, our document will be very good That is, its formatting and indentation will be very good Now see here, here subscribe to newsletter Here I can check it And the difference between radio button and check box is that you can check the check box separately here if you want to give one of the options male or female then you can select it like this after this we have text area and select tag and I will show you what it is so text area and select tag works like this as soon as you copy the text area here and I will show you the text area text area input type is equal to text but it has rows and column attribute which helps you to make the size small now see here the placeholder I've given enter your comment here so I've given enter your comment here ideally we'll keep it empty or we'll not give at least new line so I'll paste it here, enter your comment here and now it will reach to the left side I will show you, so it has reached to the left side see enter your comment here and any user can put his comment here now see I have put the content of text area enter your comment here so ideally you will not want to do this you will want to keep the text area empty and you will want to put a label and you can say label for is equal to comment and definitely we will put id here whenever we put for, then the element for which it is inside the for is its id now see here, if I write enter your comment here then what will happen if I write enter your comment, then it will come here now you will say that this is not styled properly. So this style is not properly because we will style it with CSS later. For now, I just put br tag, but I don't recommend br tag. I am telling you again that I do not recommend br tag at all. Because br tag has problems. By the way, you should know br tag, there is a line break tag, a line break comes from it, something like this. Now you must be feeling everything right, you must be saying, what is the problem in br tag but i will tell you br tag is something that i don't recommend it's not like that you don't have to use it but i don't recommend using it all the time i mean the easiest thing is that people think that you can add br tag and add new spaces i oppose this thing a lot so i will copy this and show you select tag and you see here that as soon as I put select tag here in div, so in select you get some options, the syntax of select is like this, make apple and you can use any one of the three from cherry, now you see any one of the three can be used and here I did value is equal to apple first I made select tag, in that name is equal to fruits, then option value is equal to apple, option value is equal to fruits, then option value equal to apple, option value equal to banana, option value equal to cherry When we will parse this form data, then I will tell you in the part of JavaScript, how to take this data and send it to the server So there are many things about the form that are remaining, I am going to tell you, so stay tuned for that This was about the forms, I had to tell you all the elements of the form in this video Along with that, I have told you about select tag and all these things About the form, the rest of the attributes, like action, I told you You can submit a form on any page with action and where it will handle the form So you can give that data here Then there is a method, get request or post request I will tell you the difference in these two in the coming videos But I have told you in a very rough way That get request is a very rough way GetRequest is a very simple request, PostRequest is used when you have to send big data to the server Because there is a limit to GetRequest, you can send a lot of data in PostRequest We never send passwords in GetRequest, we send it with the help of PostRequest Now here I have told the method, what happens in the name? name is equal to username means we mark it with the name if we mark it with the name, then the server will know which key value is corresponding to it so the key value that will go to the server will go according to the name its name and value will go, okay? so we will see this too when we do server side processing what is the meaning of placeholder? placeholder means what will be written inside it like here see enter your username, placeholder if I click on this, then this enter your username is not written inside placeholder if I click on it, it will not say enter your username I will write anything, see it came but enter your username is telling me here that I have to put username in it then what is the meaning of required, you have to require it you have to put the value of it or else your form will not be submitted so we will use this a lot then after this we get autofocus what does autofocus do? autofocus automatically focuses the cursor, so I will show you the magic of autofocus so if you have written autofocus in the input tag ok, so I have written autofocus in the username, now I will reload it so now see if I type on it, it will automatically focus on it so by autofocus, it happens that whenever you type, it will be typed here I hope you are understanding these things Now validation attributes, I have told you the required You can give a pattern, in which you can give regular expression pattern Now don't get confused, don't say what are you talking about we don't know regular expression, so I am sitting here to teach you all But you understand that we will accept only one particular pattern If we have put pattern is equal to this, then you can't put anything else than this pattern okay, so this thing you should know here so I hope you are enjoying this video and with that, do write sigma batch op in the comment section and please review this course in the first video because still many people ask me that should I do this course or not it is a free course is not valued by people, they say this course is free so we should watch it or take a paid course and I would like to give a note for those people who told me that we took a paid course, what should we do now? they should collect money or we should join sigma batch you guys join sigma batch, cut your losses and join sigma batch because see what is the quality of this course, I don't think I need to tell you so you guys come and do this, you will get everything here, I am telling you don't think that it is free, I was going to sell you for 10,000 rupees in this course yes that was the amount which we fixed, I was going to sell you for 10,000 rupees in this course and I think there is nothing wrong in selling any course, anyone is selling, there is nothing wrong in selling any course But the thing is that if you have bought any other course and you still feel from the heart that Sigma is a very good course which is there, then you should join, cut your losses and join Because once you make your career, you will not find all these things in the future If you look back in the coming time, then you will also say that yes, we took a paid course Then after that we took a paid course and then we took a free course, which we understood and if you become a carrier, then all these things will not matter in the future. So do what is right for you and work while understanding your rights and wrongs. I hope you are understanding things. So like the video, access the playlist, subscribe to the channel and write Sigma batch OP in the comment section below and name the land name your village and town that's it for now guys thank you so much for watching this video and i will see you next time Thanks for watching!"
    },
    {
        "video_id": "N69xumSjg5Q",
        "title": "HTML Tutorial: Lists and Tables | Web Development Tutorials #7",
        "url": "https://www.youtube.com/watch?v=N69xumSjg5Q",
        "duration": 598,
        "transcript": "So now we will move ahead here We will take these things forward a little bit. We will talk more we have already done about the links we will talk about the Lists we will talk about the Tables. What am I going to do here I will make a new file here tut7.html and install the boiler plate very quickly And here i will write, Tables and Lists So, let's do a job here, let's start with lists And here I tell you what lists are First of all, I run the live server here by disporting the port and open the file I have. As you guys can see, ok It's old, I close it And here we will talk about the lists If I write here (ul) and then write (li) inside it And here i write This is first item of my unordered list I'll explain it now ok And at the same time, I make 3, here I make second and here I make third. Simultaneously I replicate it and do here (ol) And here I write the ordered list So according to me, there is no need to understand It is understood by itself what does it do to you Then what does the ordered list do There are 2 types of lists inside the HTML ordered list, unordered list So, there is an ordered list, it looks like this, as you see numbers come by doing 1, 2, 3 And after that here is this unordered list here you can see the bullets are coming So, if I write (ol and ul attributes) here on the net Because i do not remember it, to be honest I want to see that what is ordered list and unordered list how to change all these things here 1, 2, 3, 4, 5, 6, ok So here I am looking at it according to me that type is attribute Look it is written here Use the type attribute to customize the identifier before each list item If you write type = type = 1 type =, I will show you, type = in ordered list is 1, A, a, I, i And I'll show you what all these things do, okay see this if i make it 1 then it comes in roman If I do (i), It will write something like this in Roman Along with that, if I do here A then it will come by writing A, B, C, D And at the same time, if i make (a) then it will come by writing a, b, c, d And that VS code is telling you that what are the options that you can use to it. As you type= this, and you opened it, it started telling me to choose 1 option out of these five Good Same here as well if I write type= and do it something like that So here I don't see any option So, I do one thing, look at ul's attributes then i write ul attributes And here I will find some reference somewhere and (ul) also have attributes, types Look. disc, square and circle So, you will find any website on the internet where you will get the reference and don't think that you need to memorize. there is disc, square and circle So, if I do the disc then I see how it looks If the disc is done, then look like this If it is squared then it is squared, it looks like this, it has become a square and circle If it is circled, then hollow circle has come Ok So, disc means filled circle and circle means ring that is, which is our hollow ring. So here you can see how we have used (ol and ul) Simultaneously, you can also nest the list that is, you can also put one inside the other. It's not like you can't put another list inside a (li) here As a list item we can also put another list and here we can write Another one Ok We did ctrl + s or Another two, Another three I am showing you people just like this You will format document by right clicking then everything gets set right away. Ok Look here I have to put the list inside the list I wrote it as a list item, okay If I will not write it as a list item So, what would it look like then it would look something like this A list item and then this list came out like this So, you guys' experiment and see how the list works and here we have seen 2 types of lists. ordered list and unordered list And we also saw by nesting the list I would like you to see yourself by nesting it inside our ordered list, which is (ol) Look at the list of different types by putting one inside then the practice will be good. Simultaneously, what am I going to do here? I'll talk about tables here, ok I will talk about tables and what are tables, it is a very important thing Tables are nothing, tables if you search on the net. Table What is then, no, this is not the table I write the table HTML only then it will come otherwise I will not come And I want to see the image to you people this is a table like this And you are already seeing that this type of representation of data is called a table. So, you know the table, okay How the table is made, how to make the table I want to see the table here So, i do one thing, i put a heading here I will write h3, h1 will be very big that's why Table, ok And here i wrote HTML Table What will I do after this Here I will use that with the table tag There will be 2 things inside the table One will come the thead under it will come the head of the table and there will come a tbody under it will come the body of the table Now this thing will not tell you that there is no need to cram this thing will come to you automatically as you will make 5-6 tables of HTML. But for now, I will just say that you guys keep watching him. But we start a row with the help of a (tr) And if we are inside the head, then by writing the (th) we write something like this here As I wrote the Name here, okay I would like to write the name within a row with that I would like to write Employee Id And at the same time, I would like to write Employee Role Ok this is my head done See, Name, Employee Id, Employee Role What will I do now, I will add data here What do I need to do to add more data Have to make a table row, and I will not write (th) inside it, this time I will write (td) Name Harry Ok And by ctrl + d here Oops i will replicate it like this Rohan Das Skill F, ok I wrote the name of these three here And now you guys look here I didn't have to write something like this I made a mistake here I have made a line So, I will write in a row Name, Employee Id, Employee Role Now it will come like that which went wrong Harry has come In Name, and Rohan Das has come in Employee Id, I would like to come like this in Employee Id and after that Programmer has come in Employee Role, ok Then I will replicate this row and will do Rohan here And then as if i do here Shubham Ok and I'll do something like this and Shubham is not a Programmer Subham is an Android Developer And our Rohan is a HTML Expert Then i will made it here HTML Expert, ok So, Rohan Das is a HTML Expert Any problem in the company of HTML will go to Rohan Das And here i change the everyone's Employee Id And see this, Name, Employee Id, Employee Role Somehow, we filled it Now you can add more columns here too To add the column here, put another heading, keep adding data too. So, one thing is just remembered here you guys,  I format it, the document first. One thing to remember is that table head, table body There are 2 things inside the table Head and Body What is inside the head this thing will remain inside the head whatever it is you see What did I put here, put a row I wrote Name, Employee Id, Employee Role, ok and my head is over Now inside the body I have written the content of the rest of the table. what i did here Put a (tr) inside the body, put a row and i wrote 3 things inside that row What is the meaning of row this is the meaning of row, this is the row Then what did I do After putting this row, I added rest of more rows And I'll put rows as much as I want by increasing the (tr) and finish the body of my table And in this way my table will be displayed as you see So, I hope that you must have understood the table and the list also to you people. And we will move forward from here as soon as possible and I hope this that you people will not be having any problem till now. Because it's a very simple straight forward going on these things And we will go ahead many people will also be sitting here who will know all these things already. But don't worry, I will keep giving tips and tricks to you guys in between. Which you may not know already So don't forget to like this video And if you people have not accessed this playlist then definitely access it. I will add the rest of the videos in this and I will make it bigger And that's all for now in this video Thankyou so much guys or watching this video And i will see you next time."
    },
    {
        "video_id": "1BsVhumGlNc",
        "title": "Image, Lists, and Tables in HTML | Sigma Web Development Course - Tutorial #5",
        "url": "https://www.youtube.com/watch?v=1BsVhumGlNc",
        "duration": 1100,
        "transcript": "In this video, we will see how images are made, lists are made in HTML and tables are made. So like the video. I know very few people like videos on YouTube. But if you do, thanks to your support, I get the motivation to bring such free courses. So let's go to the computer screen starting the 5th video of the Sigma Web Development course. Let's roll the intro Intro So guys I have come to my computer screen As you can see I want to tell you first Bookmark getup.com In fact bookmark this repository So that you get all the code Second thing you click on the playlist Click here and bookmark it click on star and save it now the first thing i will tell you is about the image what is image in html so what we will do is we will quickly make a folder with the name video5 new folder and here video5 you already know this click on shift right and open with code this time i will make it fast because i have already told you this but if you want to see this welcome page again and again then uncheck the show welcome page on startup and you will not see this again and again but what we have to do we will make index.html we will zoom in by mouse wheel we will toggle the screencast port so that you will know which button I am pressing and when and why now I will put an exclamation mark and bring the emmet abbreviation and here I will do view word will put an exclamation mark and bring the M8 abbreviation here And here I will do view word wrap You have to work very hard, you can see here That your word wrap is closed So what will happen here is that the horizontal scroll bar will not come Now what I will do here I will write images First of all I will write images here And what I will do here is that I will bring an image Now you can bring the image from the internet I will write here, let's say we want to bring the image of the train Okay, images of the train Because we have driven a lot of trains in this course So we will bring the images of the train, why will we bring any other image I will save images And here in the Sigma web development course, in the folder of video number 5 This is a CMS file In fact, I do one thing, I cancel it I take its snip Because it is a CMS extension I go to PNG and take it So I pressed Windows, file and take a snip of this file because it is a CMS extension I will take it on png I clicked on windows, shift and s this is a shortcut for snipping tool if you don't know this shortcut now you will know it through this course if you click on windows, shift and s your snipping tool will open who didn't know this tell me honestly in the comment section now what we will do I I have already done windows shift s and then I got into the conversation so here you click and save it here is the option of save floppy disk click on it and go to downloads go to sigma web development codes save it in video 5 image, ok saved in the name of image now there is an img tag in html as soon as you put img it, src and alt both are required attributes infact if you don't write alt, it's ok, but it's recommended I'll tell you what happens with these two attributes first of all, if you write in src image.png, you can see this image is here, so image.png and I'll put train image in alt, ok now if I show you this in browser by previewing, so see this how it looks, this is our page and this is the train image where is the alt? i will tell you see the alt is not visible suppose for some reason server is not able to show you the image suppose i wrote image2 now image2.png file here So what will be the error? What will happen? I'll show you what will happen So here the alt will be displayed And this kind of error image will be displayed Which will tell that the image you have put Put it properly, you have done something wrong The URL of the server you have given there is not this image Okay, these things are shown like this And there is an alt there So the user knows what understand the purpose of this image and if I come back here, you can see the alt text if I don't put the alt text, then what will happen if I don't put the alt text, then the alt text will not come so you don't want the user to see this image when you have an error you want the user to see this image the user should see this image I hope you understood this so the image is very straight forward it has two more attributes which are very important one is width which is width in pixels if I do 23 width is equal to so you can see in fact I will correct the image first I wrote image2 by mistake image.png is this so here you can see I have taken 23 pixels which is very small so I will make it 230 pixels you don't need to write px in this When we write width in css, we will see that we need to write px Here we just write width is equal to number in double quotes As you can see So if I bring it here, you see That we have seen this small image If I give its height too Means I give its height too I say if you keep its height 230 Then its aspect ratio will also get worse So it will get a little stretched Because what it did saying that if you keep the height of it to 230 then its aspect ratio will also go down so it will stretch a little because it has made its width and height to 230 as you can see now if you want the height to be 230 and the width to be automatically adjusted then you just use the height attribute now remove the width here so the height will be 230 pixels and the more it can go in the width, the more it will go it will be automatically adjusted, now see it is automatically adjusted in width and in height it took this now what happens is, width and height can be adjusted through CSS and we will see in the CSS section that why we should always set this width and height we should always set one thing from width and height such that when our page is loading then our image inside the page should not come suddenly in the page I will tell you in the coming videos but now you understand that these attributes of width and height I have heard many people saying that they are deprecated and should not be used. But I say that they should be used for SEO purpose. Why should they be used? I will tell you in the coming videos where I will tell you about Core Web Vitals and SEO. For now, you understand that width gives width to the image and height gives height to the image. If one of the two is applied then the other one automatically gets set. And these values are in pixels and you don't have to write px or pixel, you just have to write this number and that's it. This is an attribute, height and an src attribute, an alt attribute, you can also use style attribute in this. In fact, you can use style attribute with almost all tags. So this was about the image, now we will talk about tables in html table tag is very useful in html let me tell you what happens with table tag you can see table from table tag now I will copy this table from here and when I will copy this table from here then you will see my page will look like this so this html table where is my preview page here it is here see name harry age 100 now if I put a lot of things here so this html table where is my preview page here is the name harry age 100 now if i put more things like this name and let us say designation, let us say harry's designation programmer and let us say i want to put more things i will use alt shift bottom arrow alt shift bottom arrow and let us say i want to put all things, I will use Alt Shift bottom arrow key and here let us say I want to write favorite language and I want to write here, let's say javascript and now you see here that this table will be made like this name, destination, favorite language so what is this, how does it work, I will tell you so here you see that we have used table tag table tag has tr tag which is table row. You'll see what will come in this row. Now if you want to use this as a table heading, You say that this is my table row, That means this is the row, In which name, destination and your favorite language is written. What will come in this row and what will that be? Here you can see that it will be a heading. So that's why I will use th, th means table heading and we will write that only once so in the first tr we will write th once we have put the heading above then we will put the data so we will put td in table row which stands for table data and here in all the tr you will put rows like this what will happen, your rows will keep getting added so here let's say i write sam and this is also a programmer and let's say this is Java, its favorite language, so these rows will keep on adding under the table, you can see here that these rows are adding, adding, adding, we will see from CSS how it can be given a border, it can be styled, but this default looks like this and yes I know it is ugly but you guys just understand that table works like this now row span and col span are attributes, now you see here that row span means how many rows will span your td for example, let us say I write here, I want sam and programmer, earlier they were taking one cell, sam was taking one cell and programmer was taking one cell, I want to write sam in two cells I don't want to write programmer, I just want to write sam I want to write here that call span is equal to 2 call span is equal to 2 means that sam will take place of two columns what does it mean? sam will take place of two columns means sam will be seen like this I will show you like this so it took place of this whole column so call span means how many columns will be surrounded by default only one cell will be surrounded but sometimes one cell will be surrounded by two columns to demonstrate this I will explain to you through excel in excel you can understand that this is a table of our html sometimes I would like it to span two columns, one data so here we use merge cell and here let's say I write sam in html this thing is done by using call span sometimes we also want to merge it vertically that is, let's say I want to merge these two cells there we use row span and with whom we will use row span we will use row span with td obviously so with td we were using call span and row span so if we use row span then will span like this 2 rows, okay so I hope you understood this and when we will make tables and projects with HTML then you will understand better but I will show you the row span here so if I write here row span is equal to 2 and after this I will write one more tr here so you will see that my table is looking like this now to explain it better I will put a CSS style here what I will do here I will add a style sheet and I will name this style sheet style.css so in style.css and you don't need to understand CSS I will tell you already I will write border 2px solid black in td and I will tell you all this how it works but for now you understand that I have put this to explain you so I said that I have put this to explain to you so I said that this row will have Harry, programmer and javascript then I said that the row span of this sam will be how much, where did I give 2 rows span one I said that my java will have 2 rows span so how many rows will java take, obviously it will take 2 so here java will take 2 rows so obviously 2 so here java will take 2 rows so here you can see java has taken 2 rows so when java has taken 2 rows it means i don't have to write java in next one because its row has already been filled so i won't write java in next one so you can see here i won't write java i have made its call span 2 and its row span 2 so what happened by doing this? you can see it was harry, programmer and javascript then i said that the sam its call span is 2 means it will cover 2 columns this sam will also cover 2 columns and java will cover 2 rows so you can see here exactly the same thing happened it covered 2 rows and 2 columns so in this way row span and call span can be used in html, in html table we can also add captions and to add captions we can use caption tag like this tag I will show you If we use the caption Student details or employee details Your page will look like this You can see here That the employee details caption will be added Now you can change the font size By default, it looks like this The caption comes up Employee details will look like this Along with that You can also give header and footer But for now, by default, it looks like this, the caption comes up, you will see the employee details like this. Along with that, you can also give header and footer. You can give T-head and T-foot here. Like if I put some content in T-head and T-foot, something like this, if I put here that header and here I put footer, then you will get to see T-head and T-foot like this. You see, here is the header and here is the footer. Now I will tell you about another tag, which is called BR tag, which adds line break. So after the image, a line break will come here, you can see everything header and footer now i will tell you about another tag which is br tag which adds line break after image, there will be a line break you can see everything is down this is the header and i will add footer i will not add it here i will add it after my table at the end, this is my table footer now i can change it with css now here i can group the header and footer content with t head and T foot So what will be the header of my table, I can group it with T head Along with that, the content inside the table will come inside the T body So what will come inside the T body, my table content will come like this And after this, if I write T foot here And I want to at the end I want to put some data so I will put one more tr as you can see I will do it by right clicking and documenting it so it will be a little better format suppose I want to put this kind of tr and I want to group it in t foot so this is just the way to group that is I have put it in t foot some trs I have put in t body which is my main body and I have put it in T head which is my table head and obviously nothing will change, I have just grouped it here you can see, I will write footer so that you can know that it is a footer, I will write foot here and you can see that the last row is foot now what is the benefit of doing this, we have just grouped it so that we can target it ahead of CSS so you will use this very less but you can do grouping like this Your whole table, head content will come here, foot content will come here And body content comes in between head and foot but you can write it here But ideally head, body and then foot comes I hope you understood this So that's all about HTML tables, You don't need to know more than this And now we will talk about list List is very important in HTML Because we will use list a lot There are three types of list in HTML One is ordered list, one is unordered list and one is definition list The most used is unordered and ordered list First of all, let's see the unordered list Whenever we want to have unordered data like if i write ul here so here i will write ul as unordered list in this i can write li and i can write harry and then i can write rohan and then i can write shubham so here when i will write harry rohan shubham so ul will come like this This is an unordered list, see Harry Rohan Shubham is here There is no order of 1,2,3,4 But if I want it to be ordered, then I can write this with the help of OL So if I make its opening closing tag OL and keep the rest the same So this will be an ordered list, so here 1,2,3 will come You can do this 1, 2, 3 in ABC You can do it in capital ABC, you can do it in roman numbers You can do it with the help of CSS There are many other ways You can see here in this image That if you align it in UL, it will look like this You can see in this image If you align it in OL, it will be 1, 2, 3 This is an example of ordered list And this is an example of definition list Definition list is very less used, it has a preview like this here I have put a heading and then I have written dl dl means definition list, then dt and then dd so here the definition term is there and then the definition of the definition is there so it comes like this and you can also change it with css, it is very less used but you should know about it for interviews interviewer asks what is definition list so this kind of code is previewed like this I am not showing you by writing it for the sake of time but try it out and here first of all we will see unordered list I have told you about unordered list it is very simple and straight forward you can customize its bullet points by using type attribute for example, if i type type is equal to square i will say type is equal to and i will write square so i wrote type is equal to square in ul so it appears like square similarly i can circle type in ul or disc disc is by default means circle I can square or circle it along with that you can add any other list item now let's see ordered list in detail in ordered list, if you type li, it will come like this 1,2,3 but you can use type is equal to i when you use type is equal to i then you will get uppercase roman numbers type is equal to small i then you will get lowercase roman numbers type is equal to 1 is default you don't need to do this if you do small a then you will get alphabetical and if you do capital a then you will get uppercase alphabetical so let's do this once so I will do its type is equal to capital a you see vs code is giving us examples and suggestions And it becomes easy for us to see what are its possible values So VS code is very useful and many people are using old editors Which were used a long time ago, if you know their correct plugins You have been set a lot in it, then you can do it, VS code is modern Switch to VS code, everyone uses VS code, you can see all the big developers You will see using VS code, if you switch to VS Code Everyone uses VS Code, all the big developers you see, you will see them using VS Code If you want to do coding on mobile, I recommend replit, an app called replit comes And I would like to give a shoutout to replit.com here Because I use it a lot and I think it's pretty good So you can use replit.com on your mobile too If your computer power is not that much, you can use it You get templates in it, we will cover it more in the coming videos But now I will stick on VS code I hope you understood here ordered list, unordered list, definition list now see, we have completed 5 videos in the sigma web development series I want you to go to the first video and put your comment that how do you like this course I got 5 stars from the 5 stars that what is the initial review of this course you have seen 5 videos, according to that I know that if your order is late for a minute swiggy is a matter of delivery rider that this public does not comment much on YouTube these days I will give the source code in the description, you can access it, the playlist is here, you can access it, like the video, share it with your friends, and subscribe to the channel. I will see you in you guys keep commenting on it. I feel good. It's a two-way interaction. I will give the source code in the description. Access it. Like the video. Write Sigma Batch OP in the comment. And give your village land to me. Thank you so much guys for watching this video. And I will see you next time. Thanks for watching!"
    },
    {
        "video_id": "iDA0kF5lrVk",
        "title": "Learn HTML tables in 3 minutes 📊",
        "url": "https://www.youtube.com/watch?v=iDA0kF5lrVk",
        "duration": 238,
        "transcript": "hey it's you bro hope you're doing well and in this video i'm going to show you all how we can create a table using html so sit back relax and enjoy the show hey everyone i'm going to show you all how we can create a table using html let's say that we have a store not an online store but a brick and mortar store and our job is to create a table of the hours of operation for our store which we can best represent with the table on our website so to create a table we'll use a pair of table tags there's an opening table tag and a closing table tag to add a row to our table we can use a pair of tr tags for table row and let's say that we'll have two rows one for the days of the week and the other for the hours of operation so within this first row let's add some headers using th tags for table header and i'll list the days of the week so we have sunday through saturday so to add another header just use another pair of th tags sunday monday tuesday you get the rest table headers are inherently bold if we would like to add some data to the second row we'll add that between the tr tags for the second row so we would like some data which is td we need an opening td tag and a closing td tag for each cell let's pretend that our store is open monday through friday nine to five and closed on the weekends saturday and sunday this first cell is for the first day sunday the first column so we are closed this day let's copy our table data element and copy it this will be for the second row monday and we are open nine to five and let's fill this in for the days monday through friday and then saturday we are closed all right let's color in these cells i'll make the first row a dark gray color so to change the color of the first row within the opening tr tag for the first row there is a bg color attribute which means background color and i will set the sequel to gray and our second row let's make this light gray so within the opening tr tag for the second row let's set the bg color attribute equal to a different color like light gray pick whatever color you want it doesn't necessarily have to be gray so within the opening table tag i will set the bg color equal to what about black cool these cells are left aligned we can center them to center the cells within a row within the opening tr tag there is an align attribute and let's set this equal to center and the text is now centered and lastly let's make all of these cells the same size this wednesday cell is taking up a lot of space let's set the width equal to maybe 100 pixels and i will just copy this and with the opening table element i will set this equal to the width of each cell times the number of cells that we have so if each cell has a width of 100 and there's seven cells i will set the width equal to 700 and well there we go all of these cells are now aligned so yeah that's how to create a table in html just use a pair of table tags for each row add a pair of tr tags if you need a row to function as a header such as the days of the week use th tags if you're filling in data for a cell use td tags for table data so yeah that's how to create a table in html if you found this video helpful please be sure to smash that like button leave a random comment down below and subscribe if you'd like to become a fellow bro"
    }
]